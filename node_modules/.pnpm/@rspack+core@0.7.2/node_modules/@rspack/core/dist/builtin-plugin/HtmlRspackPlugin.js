"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HtmlRspackPlugin = void 0;
const binding_1 = require("@rspack/binding");
const zod_1 = require("../../compiled/zod");
const validate_1 = require("../util/validate");
const base_1 = require("./base");
const htmlRspackPluginOptions = zod_1.z.strictObject({
    filename: zod_1.z.string().optional(),
    template: zod_1.z.string().optional(),
    templateContent: zod_1.z.string().optional(),
    templateParameters: zod_1.z.record(zod_1.z.string()).optional(),
    inject: zod_1.z.enum(["head", "body"]).or(zod_1.z.boolean()).optional(),
    publicPath: zod_1.z.string().optional(),
    scriptLoading: zod_1.z.enum(["blocking", "defer", "module"]).optional(),
    chunks: zod_1.z.string().array().optional(),
    excludedChunks: zod_1.z.string().array().optional(),
    sri: zod_1.z.enum(["sha256", "sha384", "sha512"]).optional(),
    minify: zod_1.z.boolean().optional(),
    title: zod_1.z.string().optional(),
    favicon: zod_1.z.string().optional(),
    meta: zod_1.z.record(zod_1.z.string().or(zod_1.z.record(zod_1.z.string()))).optional()
});
exports.HtmlRspackPlugin = (0, base_1.create)(binding_1.BuiltinPluginName.HtmlRspackPlugin, (c = {}) => {
    (0, validate_1.validate)(c, htmlRspackPluginOptions);
    const meta = {};
    for (const key in c.meta) {
        const value = c.meta[key];
        if (typeof value === "string") {
            meta[key] = {
                name: key,
                content: value
            };
        }
        else {
            meta[key] = {
                name: key,
                ...value
            };
        }
    }
    const scriptLoading = c.scriptLoading ?? "defer";
    const configInject = c.inject ?? true;
    const inject = configInject === true
        ? scriptLoading === "blocking"
            ? "body"
            : "head"
        : configInject === false
            ? "false"
            : configInject;
    return {
        ...c,
        meta,
        scriptLoading,
        inject
    };
});
