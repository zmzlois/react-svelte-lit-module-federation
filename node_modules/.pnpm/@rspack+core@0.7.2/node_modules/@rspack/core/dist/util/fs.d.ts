/**
 * The following code is modified based on
 * https://github.com/webpack/webpack/blob/4b4ca3b/lib/util/fs.js
 *
 * MIT Licensed
 * Author Tobias Koppers @sokra
 * Copyright (c) JS Foundation and other contributors
 * https://github.com/webpack/webpack/blob/main/LICENSE
 */
/// <reference types="node" />
/// <reference types="node" />
import { WatchOptions } from "../config";
export interface Watcher {
    close(): void;
    pause(): void;
    getAggregatedChanges?(): Set<string>;
    getAggregatedRemovals?(): Set<string>;
    getFileTimeInfoEntries?(): Map<string, FileSystemInfoEntry | "ignore">;
    getContextTimeInfoEntries?(): Map<string, FileSystemInfoEntry | "ignore">;
    getInfo(): WatcherInfo;
}
export interface WatcherInfo {
    changes: Set<string>;
    removals: Set<string>;
    fileTimeInfoEntries: Map<string, FileSystemInfoEntry | "ignore">;
    contextTimeInfoEntries: Map<string, FileSystemInfoEntry | "ignore">;
}
interface IDirent {
    isFile: () => boolean;
    isDirectory: () => boolean;
    isBlockDevice: () => boolean;
    isCharacterDevice: () => boolean;
    isSymbolicLink: () => boolean;
    isFIFO: () => boolean;
    isSocket: () => boolean;
    name: string | Buffer;
}
interface IStats {
    isFile: () => boolean;
    isDirectory: () => boolean;
    isBlockDevice: () => boolean;
    isCharacterDevice: () => boolean;
    isSymbolicLink: () => boolean;
    isFIFO: () => boolean;
    isSocket: () => boolean;
    dev: number | bigint;
    ino: number | bigint;
    mode: number | bigint;
    nlink: number | bigint;
    uid: number | bigint;
    gid: number | bigint;
    rdev: number | bigint;
    size: number | bigint;
    blksize: number | bigint;
    blocks: number | bigint;
    atimeMs: number | bigint;
    mtimeMs: number | bigint;
    ctimeMs: number | bigint;
    birthtimeMs: number | bigint;
    atime: Date;
    mtime: Date;
    ctime: Date;
    birthtime: Date;
}
export interface OutputFileSystem {
    writeFile: (arg0: string, arg1: string | Buffer, arg2: (arg0?: null | NodeJS.ErrnoException) => void) => void;
    mkdir: (arg0: string, arg1: (arg0?: null | NodeJS.ErrnoException) => void) => void;
    readdir: (arg0: string, arg1: (arg0?: null | NodeJS.ErrnoException, arg1?: (string | Buffer)[] | IDirent[]) => void) => void;
    rmdir: (arg0: string, arg1: (arg0?: null | NodeJS.ErrnoException) => void) => void;
    unlink: (arg0: string, arg1: (arg0?: null | NodeJS.ErrnoException) => void) => void;
    stat: (arg0: string, arg1: (arg0?: null | NodeJS.ErrnoException, arg1?: IStats) => void) => void;
    lstat?: (arg0: string, arg1: (arg0?: null | NodeJS.ErrnoException, arg1?: IStats) => void) => void;
    readFile: (arg0: string, arg1: (arg0?: null | NodeJS.ErrnoException, arg1?: string | Buffer) => void) => void;
    join?: (arg0: string, arg1: string) => string;
    relative?: (arg0: string, arg1: string) => string;
    dirname?: (arg0: string) => string;
}
export declare function rmrf(fs: OutputFileSystem, p: string, callback: (err?: Error | null) => void): void;
export declare const mkdirp: (fs: OutputFileSystem, p: string, callback: (error?: Error) => void) => void;
export interface FileSystemInfoEntry {
    safeTime: number;
    timestamp?: number;
}
export interface WatchFileSystem {
    watch(files: Iterable<string>, directories: Iterable<string>, missing: Iterable<string>, startTime: number, options: WatchOptions, callback: (error: Error | null, fileTimeInfoEntries: Map<string, FileSystemInfoEntry | "ignore">, contextTimeInfoEntries: Map<string, FileSystemInfoEntry | "ignore">, changedFiles: Set<string>, removedFiles: Set<string>) => void, callbackUndelayed: (fileName: string, changeTime: number) => void): Watcher;
}
export {};
