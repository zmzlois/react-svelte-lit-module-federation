import { JsCodegenerationResult, JsCodegenerationResults, JsCreateData, JsModule } from "@rspack/binding";
import { Source } from "webpack-sources";
import { Compilation } from "./Compilation";
export type ResourceData = {
    resource: string;
    path: string;
    query?: string;
    fragment?: string;
};
export type ResourceDataWithData = ResourceData & {
    data?: Record<string, any>;
};
export type CreateData = Partial<JsCreateData>;
export type ResolveData = {
    context: string;
    request: string;
    fileDependencies: string[];
    missingDependencies: string[];
    contextDependencies: string[];
    createData?: CreateData;
};
export type ContextModuleFactoryBeforeResolveResult = false | {
    context: string;
    request?: string;
};
export type ContextModuleFactoryAfterResolveResult = false | {
    resource: string;
    context: string;
    request: string;
    regExp?: RegExp;
    dependencies: Array<any>;
};
export declare class Module {
    #private;
    _originalSource?: Source;
    context?: string;
    resource?: string;
    request?: string;
    userRequest?: string;
    rawRequest?: string;
    /**
     * Records the dynamically added fields for Module on the JavaScript side.
     * These fields are generally used within a plugin, so they do not need to be passed back to the Rust side.
     * @see {@link Compilation#customModules}
     */
    buildInfo: Record<string, any>;
    /**
     * Records the dynamically added fields for Module on the JavaScript side.
     * These fields are generally used within a plugin, so they do not need to be passed back to the Rust side.
     * @see {@link Compilation#customModules}
     */
    buildMeta: Record<string, any>;
    static __from_binding(module: JsModule, compilation?: Compilation): Module;
    constructor(module: JsModule, compilation?: Compilation);
    originalSource(): Source | null;
    identifier(): string;
    nameForCondition(): string | null;
}
export declare class CodeGenerationResult {
    #private;
    constructor(result: JsCodegenerationResult);
    get(sourceType: string): string;
}
export declare class CodeGenerationResults {
    #private;
    constructor(result: JsCodegenerationResults);
}
