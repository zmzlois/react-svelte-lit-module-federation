"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var cache_exports = {};
__export(cache_exports, {
  readFile: () => readFile,
  readFileSync: () => readFileSync,
  readJSON: () => readJSON,
  readJSONSync: () => readJSONSync
});
module.exports = __toCommonJS(cache_exports);
var import_fs_extra = __toESM(require("fs-extra"));
const cache = /* @__PURE__ */ new Map();
async function readFile(path) {
  if (cache.has(path))
    return cache.get(path);
  const res = await import_fs_extra.default.readFile(path, "utf-8");
  cache.set(path, res);
  return res;
}
function readFileSync(path) {
  if (cache.has(path))
    return cache.get(path);
  const res = import_fs_extra.default.readFileSync(path, "utf-8");
  cache.set(path, res);
  return res;
}
async function readJSON(path) {
  const str = await readFile(path);
  return JSON.parse(str);
}
function readJSONSync(path) {
  const str = readFileSync(path);
  return JSON.parse(str);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  readFile,
  readFileSync,
  readJSON,
  readJSONSync
});
