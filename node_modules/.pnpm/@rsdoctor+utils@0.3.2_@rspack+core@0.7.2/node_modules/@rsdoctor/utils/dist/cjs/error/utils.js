"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var utils_exports = {};
__export(utils_exports, {
  insertSpace: () => insertSpace,
  printErrors: () => printErrors,
  toLevel: () => toLevel
});
module.exports = __toCommonJS(utils_exports);
var import_types = require("@rsdoctor/types");
function toLevel(level) {
  return import_types.Err.ErrorLevel[level];
}
function insertSpace(rawLines, line, width) {
  const lines = rawLines.split("\n");
  lines[line - 1] = Array(width).fill(" ").join("") + lines[line - 1];
  return lines.join("\n");
}
function printErrors({ errors, warnings }, logLevel = "Error") {
  const onlyError = logLevel === "Error";
  if (logLevel === "Silent") {
    return "";
  }
  if (onlyError && errors.length === 0 || !onlyError && errors.length === 0 && warnings.length === 0) {
    return "";
  }
  const msgs = [];
  if (onlyError) {
    msgs.push(
      `Build failed with ${errors.length} error:`,
      ...errors.map((item) => item.toString()),
      ""
    );
  } else {
    const title = errors.length === 0 ? `Build succuss with ${warnings.length} warning:` : `Build failed with ${errors.length} error, ${warnings.length} warning:`;
    msgs.push(
      title,
      ...errors.map((item) => item.toString()),
      ...warnings.map((item) => item.toString()),
      ""
    );
  }
  return msgs.join("\n\n");
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  insertSpace,
  printErrors,
  toLevel
});
