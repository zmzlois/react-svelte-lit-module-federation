"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var envinfo_exports = {};
__export(envinfo_exports, {
  getCPUInfo: () => getCPUInfo,
  getGitBranch: () => getGitBranch,
  getGitRepo: () => getGitRepo,
  getGlobalNpmPackageVersion: () => getGlobalNpmPackageVersion,
  getMemoryInfo: () => getMemoryInfo,
  getNodeVersion: () => getNodeVersion,
  getNpmPackageVersion: () => getNpmPackageVersion,
  getNpmVersion: () => getNpmVersion,
  getOSInfo: () => getOSInfo,
  getPnpmVersion: () => getPnpmVersion,
  getYarnVersion: () => getYarnVersion
});
module.exports = __toCommonJS(envinfo_exports);
var import_envinfo = require("envinfo");
var import_child_process = require("child_process");
const getCPUInfo = () => import_envinfo.helpers.getCPUInfo().then((res) => res[1]);
const getOSInfo = () => import_envinfo.helpers.getOSInfo().then((res) => res[1]);
const getMemoryInfo = () => import_envinfo.helpers.getMemoryInfo().then((res) => res[1]);
const getNodeVersion = () => import_envinfo.helpers.getNodeInfo().then((res) => res[1]);
const getYarnVersion = () => import_envinfo.helpers.getYarnInfo().then((res) => res[1]);
const getNpmVersion = () => import_envinfo.helpers.getnpmInfo().then((res) => res[1]);
const getPnpmVersion = () => import_envinfo.helpers.getpnpmInfo().then((res) => res[1]);
function getNpmPackageVersion(pkg) {
  const isArray = Array.isArray(pkg);
  return (0, import_envinfo.run)(
    {
      npmPackages: isArray ? pkg : [pkg]
    },
    { json: true, showNotFound: true }
  ).then((res) => {
    const { npmPackages = {} } = JSON.parse(res) || {};
    return isArray ? pkg.map((e) => npmPackages[e] || "Not Found") : npmPackages[pkg];
  });
}
function getGlobalNpmPackageVersion(pkg) {
  const isArray = Array.isArray(pkg);
  return (0, import_envinfo.run)(
    {
      npmGlobalPackages: isArray ? pkg : [pkg]
    },
    { json: true, showNotFound: true }
  ).then((res) => {
    const { npmGlobalPackages = {} } = JSON.parse(res) || {};
    return isArray ? pkg.map((e) => npmGlobalPackages[e] || "Not Found") : npmGlobalPackages[pkg];
  });
}
function getGitBranch() {
  return new Promise((resolve, reject) => {
    (0, import_child_process.exec)("git branch --show-current", (err, stdout) => {
      if (err) {
        (0, import_child_process.exec)("git branch", (err2, stdout2) => {
          if (err2) {
            reject(err2);
          } else {
            resolve(
              stdout2.split("\n").map((e) => e.replace("* ", "")).join("").trim()
            );
          }
        });
      } else {
        resolve(stdout.trim());
      }
    });
  });
}
function getGitRepo() {
  return new Promise((resolve, reject) => {
    (0, import_child_process.exec)("git config --get remote.origin.url", (err, stdout) => {
      if (err)
        reject(err);
      else
        resolve(stdout.trim());
    });
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getCPUInfo,
  getGitBranch,
  getGitRepo,
  getGlobalNpmPackageVersion,
  getMemoryInfo,
  getNodeVersion,
  getNpmPackageVersion,
  getNpmVersion,
  getOSInfo,
  getPnpmVersion,
  getYarnVersion
});
