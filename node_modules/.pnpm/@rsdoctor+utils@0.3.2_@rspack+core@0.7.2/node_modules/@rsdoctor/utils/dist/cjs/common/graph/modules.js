"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var modules_exports = {};
__export(modules_exports, {
  filterModulesAndDependenciesByPackageDeps: () => filterModulesAndDependenciesByPackageDeps,
  getModuleByDependency: () => getModuleByDependency,
  getModuleDetails: () => getModuleDetails,
  getModuleIdsByChunk: () => getModuleIdsByChunk,
  getModuleIdsByModulesIds: () => getModuleIdsByModulesIds,
  getModulesByAsset: () => getModulesByAsset,
  getModulesByChunk: () => getModulesByChunk,
  getModulesByChunks: () => getModulesByChunks
});
module.exports = __toCommonJS(modules_exports);
var import_chunk = require("./chunk");
var import_dependency = require("./dependency");
function getModulesByAsset(asset, chunks, modules) {
  const ids = (0, import_chunk.getChunkIdsByAsset)(asset);
  const cks = (0, import_chunk.getChunksByChunkIds)(ids, chunks);
  const res = getModulesByChunks(cks, modules);
  return res;
}
function getModuleIdsByChunk(chunk) {
  const { modules = [] } = chunk;
  return modules;
}
function getModuleIdsByModulesIds(moduleIds, modules) {
  return moduleIds.map((id) => modules.find((m) => m.id === id)).filter(Boolean);
}
function getModulesByChunk(chunk, modules) {
  const ids = getModuleIdsByChunk(chunk);
  return ids.map((id) => modules.find((e) => e.id === id)).filter(Boolean);
}
function getModulesByChunks(chunks, modules) {
  const res = [];
  chunks.forEach((chunk) => {
    getModulesByChunk(chunk, modules).forEach((md) => {
      if (!res.filter((_m) => _m.id === md.id).length)
        res.push(md);
    });
  });
  return res;
}
function getModuleByDependency(dep, modules) {
  return modules.find((item) => item.id === dep.module);
}
function filterModulesAndDependenciesByPackageDeps(deps, dependencies, modules) {
  const _dependencies = [];
  const _modules = [];
  for (let i = 0; i < deps.length; i++) {
    const dep = (0, import_dependency.getDependencyByPackageData)(deps[i], dependencies);
    if (dep) {
      _dependencies.push(dep);
      const module2 = getModuleByDependency(dep, modules);
      if (module2) {
        _modules.push(module2);
      }
    }
  }
  return {
    dependencies: _dependencies,
    modules: _modules
  };
}
function getModuleDetails(moduleId, modules, dependencies) {
  const module2 = modules.find((e) => e.id === moduleId);
  return {
    module: module2,
    dependencies: (0, import_dependency.getDependenciesByModule)(module2, dependencies)
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  filterModulesAndDependenciesByPackageDeps,
  getModuleByDependency,
  getModuleDetails,
  getModuleIdsByChunk,
  getModuleIdsByModulesIds,
  getModulesByAsset,
  getModulesByChunk,
  getModulesByChunks
});
