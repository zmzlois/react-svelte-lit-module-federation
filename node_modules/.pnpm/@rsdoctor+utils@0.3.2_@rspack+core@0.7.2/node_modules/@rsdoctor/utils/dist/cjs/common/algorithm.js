"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var algorithm_exports = {};
__export(algorithm_exports, {
  compressText: () => compressText,
  decompressText: () => decompressText,
  mergeIntervals: () => mergeIntervals,
  random: () => random
});
module.exports = __toCommonJS(algorithm_exports);
var import_zlib = require("zlib");
var import_buffer = require("buffer");
function mergeIntervals(intervals) {
  intervals.sort((a, b) => a[0] - b[0]);
  let previous;
  let current;
  const result = [];
  for (let i = 0; i < intervals.length; i++) {
    current = intervals[i];
    if (!previous || current[0] > previous[1]) {
      previous = current;
      result.push(current);
    } else {
      previous[1] = Math.max(previous[1], current[1]);
    }
  }
  return result;
}
function compressText(input) {
  return (0, import_zlib.deflateSync)(input).toString("base64");
}
function decompressText(input) {
  return (0, import_zlib.inflateSync)(import_buffer.Buffer.from(input, "base64")).toString();
}
function random(min, max) {
  return Math.floor(Math.random() * (max - min + 1) + min);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  compressText,
  decompressText,
  mergeIntervals,
  random
});
