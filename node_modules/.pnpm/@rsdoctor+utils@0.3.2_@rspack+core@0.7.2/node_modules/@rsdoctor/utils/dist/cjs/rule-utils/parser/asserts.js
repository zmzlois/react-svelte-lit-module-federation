"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var asserts_exports = {};
__export(asserts_exports, {
  asserts: () => asserts
});
module.exports = __toCommonJS(asserts_exports);
var import_lodash = require("lodash");
function isSyntaxNode(node) {
  return (0, import_lodash.isObject)(node) && "type" in node;
}
function assertCreator(type) {
  return (node) => {
    return isSyntaxNode(node) && node.type === type;
  };
}
const asserts = {
  isProgram: assertCreator("Program"),
  isEmptyStatement: assertCreator("EmptyStatement"),
  isBlockStatement: assertCreator("BlockStatement"),
  isStaticBlock: assertCreator("StaticBlock"),
  isExpressionStatement: assertCreator(
    "ExpressionStatement"
  ),
  isIfStatement: assertCreator("IfStatement"),
  isLabeledStatement: assertCreator("LabeledStatement"),
  isBreakStatement: assertCreator("BreakStatement"),
  isContinueStatement: assertCreator("ContinueStatement"),
  isWithStatement: assertCreator("WithStatement"),
  isSwitchStatement: assertCreator("SwitchStatement"),
  isReturnStatement: assertCreator("ReturnStatement"),
  isThrowStatement: assertCreator("ThrowStatement"),
  isTryStatement: assertCreator("TryStatement"),
  isWhileStatement: assertCreator("WhileStatement"),
  isDoWhileStatement: assertCreator("DoWhileStatement"),
  isForStatement: assertCreator("ForStatement"),
  isForInStatement: assertCreator("ForInStatement"),
  isForOfStatement: assertCreator("ForOfStatement"),
  isDebuggerStatement: assertCreator("DebuggerStatement"),
  isFunctionDeclaration: assertCreator(
    "FunctionDeclaration"
  ),
  isVariableDeclaration: assertCreator(
    "VariableDeclaration"
  ),
  isVariableDeclarator: assertCreator("VariableDeclarator"),
  isChainExpression: assertCreator("ChainExpression"),
  isThisExpression: assertCreator("ThisExpression"),
  isArrayExpression: assertCreator("ArrayExpression"),
  isObjectExpression: assertCreator("ObjectExpression"),
  isPrivateIdentifier: assertCreator("PrivateIdentifier"),
  isProperty: assertCreator("Property"),
  isPropertyDefinition: assertCreator("PropertyDefinition"),
  isFunctionExpression: assertCreator("FunctionExpression"),
  isSequenceExpression: assertCreator("SequenceExpression"),
  isUnaryExpression: assertCreator("UnaryExpression"),
  isBinaryExpression: assertCreator("BinaryExpression"),
  isAssignmentExpression: assertCreator(
    "AssignmentExpression"
  ),
  isUpdateExpression: assertCreator("UpdateExpression"),
  isLogicalExpression: assertCreator("LogicalExpression"),
  isConditionalExpression: assertCreator(
    "ConditionalExpression"
  ),
  isNewExpression: assertCreator("NewExpression"),
  isSwitchCase: assertCreator("SwitchCase"),
  isCatchClause: assertCreator("CatchClause"),
  isIdentifier: assertCreator("Identifier"),
  isLiteral: assertCreator("Literal"),
  isSuper: assertCreator("Super"),
  isSpreadElement: assertCreator("SpreadElement"),
  isArrowFunctionExpression: assertCreator(
    "ArrowFunctionExpression"
  ),
  isYieldExpression: assertCreator("YieldExpression"),
  isTemplateLiteral: assertCreator("TemplateLiteral"),
  isTaggedTemplateExpression: assertCreator(
    "TaggedTemplateExpression"
  ),
  isTemplateElement: assertCreator("TemplateElement"),
  isObjectPattern: assertCreator("ObjectPattern"),
  isArrayPattern: assertCreator("ArrayPattern"),
  isRestElement: assertCreator("RestElement"),
  isAssignmentPattern: assertCreator("AssignmentPattern"),
  isClassBody: assertCreator("ClassBody"),
  isClassDeclaration: assertCreator("ClassDeclaration"),
  isClassExpression: assertCreator("ClassExpression"),
  isMetaProperty: assertCreator("MetaProperty"),
  isImportDeclaration: assertCreator("ImportDeclaration"),
  isImportSpecifier: assertCreator("ImportSpecifier"),
  isImportExpression: assertCreator("ImportExpression"),
  isImportDefaultSpecifier: assertCreator(
    "ImportDefaultSpecifier"
  ),
  isImportNamespaceSpecifier: assertCreator(
    "ImportNamespaceSpecifier"
  ),
  isExportNamedDeclaration: assertCreator(
    "ExportNamedDeclaration"
  ),
  isExportSpecifier: assertCreator("ExportSpecifier"),
  isExportDefaultDeclaration: assertCreator(
    "ExportDefaultDeclaration"
  ),
  isExportAllDeclaration: assertCreator(
    "ExportAllDeclaration"
  ),
  isAwaitExpression: assertCreator("AwaitExpression"),
  isMethodDefinition: assertCreator("MethodDefinition"),
  isMemberExpression: assertCreator("MemberExpression"),
  isComment(node) {
    return isSyntaxNode(node) && (node.type === "Line" || node.type === "Block");
  },
  isDirective(node) {
    return asserts.isExpressionStatement(node) && "directive" in node;
  },
  isSimpleCallExpression(node) {
    return isSyntaxNode(node) && node.type === "CallExpression";
  },
  isAssignmentProperty(node) {
    return asserts.isProperty(node) && node.kind === "init";
  },
  isSimpleLiteral(node) {
    return asserts.isLiteral(node) && !asserts.isRegExpLiteral(node) && !asserts.isBigIntLiteral(node);
  },
  isRegExpLiteral(node) {
    return asserts.isLiteral(node) && "regex" in node;
  },
  isBigIntLiteral(node) {
    return asserts.isLiteral(node) && "bigint" in node;
  },
  isExportStatement(node) {
    return asserts.isExportAllDeclaration(node) || asserts.isExportDefaultDeclaration(node) || asserts.isExportNamedDeclaration(node);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  asserts
});
