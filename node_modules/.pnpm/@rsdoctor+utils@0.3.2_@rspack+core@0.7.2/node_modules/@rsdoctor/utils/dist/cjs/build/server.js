"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var server_exports = {};
__export(server_exports, {
  createApp: () => createApp,
  createGetPortSyncFunctionString: () => createGetPortSyncFunctionString,
  createServer: () => createServer,
  defaultPort: () => defaultPort,
  getPort: () => getPort,
  getPortSync: () => getPortSync
});
module.exports = __toCommonJS(server_exports);
var import_connect = __toESM(require("connect"));
var import_http = __toESM(require("http"));
var import_os = __toESM(require("os"));
var import_get_port = __toESM(require("get-port"));
var import_child_process = require("child_process");
var import_algorithm = require("../common/algorithm");
const defaultPort = (0, import_algorithm.random)(3e3, 8999);
async function getPort(expectPort) {
  return (0, import_get_port.default)({ port: expectPort });
}
const createGetPortSyncFunctionString = (expectPort) => `
(() => {
const net = require('net');

function getPort(expectPort) {
  return new Promise((resolve, reject) => {
    const server = net.createServer();
    server.unref();
    server.on('error', reject);
    server.listen(expectPort, () => {
      const { port } = server.address();
      server.close(() => {
        resolve(port);
      });
    });
  });
}

async function getAvailablePort(expectPort) {
  let port = expectPort;
  while (true) {
    try {
      const res = await getPort(port);
      return res;
    } catch (error) {
      port += Math.floor(Math.random() * 100 + 1);
    }
  }
}

getAvailablePort(${expectPort}).then(port => process.stdout.write(port.toString()));
})();
`.trim();
function getPortSync(expectPort) {
  const statement = import_os.default.EOL === "\n" ? createGetPortSyncFunctionString(expectPort) : createGetPortSyncFunctionString(expectPort).replace(/\n/g, "");
  const port = (0, import_child_process.execSync)(`node -e "${statement}"`, { encoding: "utf-8" });
  return Number(port);
}
function createApp() {
  return (0, import_connect.default)();
}
async function createServer(port) {
  const app = createApp();
  const server = import_http.default.createServer(app);
  const res = {
    app,
    server,
    port,
    close() {
      return new Promise((resolve, reject) => {
        if ("closeAllConnections" in server) {
          server.closeAllConnections();
        }
        if ("closeIdleConnections" in server) {
          server.closeIdleConnections();
        }
        server.close((err) => {
          if (err)
            reject(err);
          resolve();
        });
      });
    }
  };
  return new Promise((resolve) => {
    server.listen(port, () => {
      resolve(res);
    });
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createApp,
  createGetPortSyncFunctionString,
  createServer,
  defaultPort,
  getPort,
  getPortSync
});
