"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var plugin_exports = {};
__export(plugin_exports, {
  getPluginData: () => getPluginData,
  getPluginHooks: () => getPluginHooks,
  getPluginSummary: () => getPluginSummary,
  getPluginTapNames: () => getPluginTapNames
});
module.exports = __toCommonJS(plugin_exports);
function getPluginHooks(plugin) {
  return Object.keys(plugin);
}
function getPluginTapNames(plugin) {
  const hooks = getPluginHooks(plugin);
  const tapNames = /* @__PURE__ */ new Set();
  hooks.forEach((hook) => {
    plugin[hook].forEach((data) => {
      tapNames.add(data.tapName);
    });
  });
  return [...tapNames];
}
function getPluginSummary(plugin) {
  return {
    hooks: getPluginHooks(plugin),
    tapNames: getPluginTapNames(plugin)
  };
}
function getPluginData(plugin, selectedHooks = [], selectedTapNames = []) {
  const hooks = getPluginHooks(plugin).filter((hook) => {
    if (selectedHooks.length && selectedHooks.indexOf(hook) === -1) {
      return false;
    }
    return true;
  });
  if (!hooks.length)
    return [];
  const tapNames = getPluginTapNames(plugin);
  return tapNames.reduce((total, tapName) => {
    if (selectedTapNames.length && selectedTapNames.indexOf(tapName) === -1) {
      return total;
    }
    hooks.forEach((hook) => {
      const hookData = plugin[hook].filter((e) => e.tapName === tapName);
      if (hookData.length === 0)
        return;
      total.push({
        tapName,
        hook,
        data: hookData.map((e) => {
          return {
            startAt: e.startAt,
            endAt: e.endAt,
            costs: e.costs,
            type: e.type
          };
        })
      });
    });
    return total;
  }, []);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getPluginData,
  getPluginHooks,
  getPluginSummary,
  getPluginTapNames
});
