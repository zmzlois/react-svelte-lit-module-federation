"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var parser_exports = {};
__export(parser_exports, {
  parser: () => parser
});
module.exports = __toCommonJS(parser_exports);
var import_acorn = require("acorn");
var import_acorn_import_assertions = require("acorn-import-assertions");
var walk = __toESM(require("acorn-walk"));
var import_asserts = require("./asserts");
var utils = __toESM(require("./utils"));
const acornParserInternal = import_acorn.Parser.extend(import_acorn_import_assertions.importAssertions);
let acornParserExport = import_acorn.Parser.extend(import_acorn_import_assertions.importAssertions);
const parser = {
  /** AST iterator */
  walk,
  /**
   * Compile code
   * - Output root node is `Node.Program`
   */
  parse: (input, options) => {
    return acornParserExport.parse(input, options);
  },
  /**
   * Compile the next first expression
   * - The output root node is `Node.ExpressionStatement`
   */
  parseExpressionAt: (input, pos, options) => {
    return acornParserExport.parseExpressionAt(
      input,
      pos,
      options
    );
  },
  /**
   * add plugins for acorn
   */
  extend(...args) {
    acornParserExport = acornParserExport.extend(...args);
    return acornParserExport;
  },
  /** Set of assertions */
  asserts: import_asserts.asserts,
  utils,
  /**
   * @internal
   * parser for internal packages
   */
  internal: {
    parse: (input, options) => {
      return acornParserInternal.parse(input, options);
    },
    parseExpressionAt: (input, pos, options) => {
      return acornParserInternal.parseExpressionAt(
        input,
        pos,
        options
      );
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  parser
});
