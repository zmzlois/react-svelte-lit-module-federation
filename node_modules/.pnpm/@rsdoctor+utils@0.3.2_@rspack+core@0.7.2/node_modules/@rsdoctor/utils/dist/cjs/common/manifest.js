"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var manifest_exports = {};
__export(manifest_exports, {
  fetchShardingData: () => fetchShardingData,
  fetchShardingFiles: () => fetchShardingFiles,
  isShardingData: () => isShardingData
});
module.exports = __toCommonJS(manifest_exports);
var import_algorithm = require("./algorithm");
var import_url = require("./url");
function isShardingData(data) {
  if (Array.isArray(data) && data.length > 0) {
    if (data.every((e) => (0, import_url.isRemoteUrl)(e))) {
      return true;
    }
  }
  return false;
}
async function fetchShardingData(shardingFiles, fetchImplement) {
  const res = await Promise.all(
    shardingFiles.map((url) => fetchImplement(url))
  );
  const strings = res.length === 0 ? [] : res.reduce((t, e) => t + e);
  return typeof strings === "object" ? strings : JSON.parse((0, import_algorithm.decompressText)(strings));
}
async function fetchShardingFiles(data, fetchImplement, filterKeys) {
  const datas = await Promise.all(
    Object.keys(data).map(async (_key) => {
      const key = _key;
      const val = data[key];
      if (filterKeys?.length && filterKeys.indexOf(key) < 0) {
        return {
          [key]: []
        };
      }
      if (isShardingData(val)) {
        return {
          [key]: await fetchShardingData(val, fetchImplement)
        };
      }
      return {
        [key]: val
      };
    })
  );
  return datas.reduce(
    (t, c) => Object.assign(t, c)
  );
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  fetchShardingData,
  fetchShardingFiles,
  isShardingData
});
