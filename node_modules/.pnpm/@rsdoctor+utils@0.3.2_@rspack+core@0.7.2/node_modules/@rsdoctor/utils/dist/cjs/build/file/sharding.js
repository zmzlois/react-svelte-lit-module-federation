"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var sharding_exports = {};
__export(sharding_exports, {
  FileSharding: () => FileSharding
});
module.exports = __toCommonJS(sharding_exports);
var import_fs_extra = __toESM(require("fs-extra"));
var import_fs = __toESM(require("fs"));
var import_path = __toESM(require("path"));
class FileSharding {
  constructor(content, limitBytes = 1024 * 1024 * 10, encoding = "utf-8") {
    this.content = content;
    this.limitBytes = limitBytes;
    this.encoding = encoding;
  }
  /**
   * @param ext the extension name of the output file (must starts with ".")
   */
  createVirtualShardingFiles(ext = "") {
    const bf = Buffer.from(this.content, this.encoding);
    const res = [];
    const threshold = this.limitBytes;
    let tmpBytes = 0;
    while (bf.byteLength > tmpBytes) {
      res.push(bf.subarray(tmpBytes, tmpBytes + threshold));
      tmpBytes += threshold;
    }
    return res.map((e, i) => ({ filename: `${i}${ext}`, content: e }));
  }
  /**
   * @param folder absolute path of folder which used to save string sharding files.
   * @param ext the extension name of the output file (must starts with ".")
   */
  async writeStringToFolder(folder, ext = "") {
    const dist = import_path.default.resolve(folder);
    await import_fs_extra.default.ensureDir(dist);
    const res = this.createVirtualShardingFiles(ext);
    await Promise.all(
      res.map(
        (e) => new Promise((resolve, reject) => {
          const stream = import_fs.default.createWriteStream(
            import_path.default.join(dist, e.filename),
            this.encoding
          );
          stream.end(e.content);
          stream.once("close", () => resolve(void 0));
          stream.once("error", (err) => reject(err));
        })
      )
    );
    return res;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  FileSharding
});
