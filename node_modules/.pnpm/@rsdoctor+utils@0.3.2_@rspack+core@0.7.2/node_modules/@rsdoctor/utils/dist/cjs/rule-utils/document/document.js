"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var document_exports = {};
__export(document_exports, {
  Document: () => Document
});
module.exports = __toCommonJS(document_exports);
var import_lines_and_columns = require("lines-and-columns");
var import_lodash = require("lodash");
class Document {
  constructor(content) {
    /** Actual document content. */
    this._text = "";
    this._text;
    this._text = content;
    this.createFinder();
  }
  /** Generate location search */
  createFinder() {
    const find = new import_lines_and_columns.LinesAndColumns(this._text);
    this.positionAt = (offset) => {
      if (offset >= this._text.length) {
        offset = this._text.length - 1;
      }
      if (offset < 0) {
        offset = 0;
      }
      const result = find.locationForIndex(offset);
      if (!result) {
        return;
      }
      return {
        line: result.line + 1,
        column: result.column
      };
    };
    this.offsetAt = (position) => {
      return find.indexForLocation({
        line: position.line - 1,
        column: position.column
      }) ?? void 0;
    };
  }
  getText(range) {
    if (!range) {
      return this._text;
    }
    const start = typeof range.start === "number" ? range.start : this.offsetAt(range.start);
    const end = typeof range.end === "number" ? range.end : this.offsetAt(range.end);
    if ((0, import_lodash.isUndefined)(start)) {
      throw new Error(`Location ${JSON.stringify(start)} is illegal`);
    }
    if ((0, import_lodash.isUndefined)(end)) {
      throw new Error(`Location ${JSON.stringify(end)} is illegal`);
    }
    return this._text.slice(start, end);
  }
  /** Edit document data */
  edit(data) {
    let { _text: content } = this;
    const startOffset = (0, import_lodash.isNumber)(data.start) ? data.start : this.offsetAt(data.start);
    const endOffset = (0, import_lodash.isNumber)(data.end) ? data.end : this.offsetAt(data.end);
    if ((0, import_lodash.isUndefined)(startOffset) || (0, import_lodash.isUndefined)(endOffset)) {
      return;
    }
    const startTxt = content.substring(0, startOffset);
    const endTxt = content.substring(endOffset, content.length);
    content = startTxt + data.newText + endTxt;
    return content;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Document
});
