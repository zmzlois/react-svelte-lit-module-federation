import { helpers, run } from "envinfo";
import { exec } from "child_process";
const getCPUInfo = () => helpers.getCPUInfo().then((res) => res[1]);
const getOSInfo = () => helpers.getOSInfo().then((res) => res[1]);
const getMemoryInfo = () => helpers.getMemoryInfo().then((res) => res[1]);
const getNodeVersion = () => helpers.getNodeInfo().then((res) => res[1]);
const getYarnVersion = () => helpers.getYarnInfo().then((res) => res[1]);
const getNpmVersion = () => helpers.getnpmInfo().then((res) => res[1]);
const getPnpmVersion = () => helpers.getpnpmInfo().then((res) => res[1]);
function getNpmPackageVersion(pkg) {
  const isArray = Array.isArray(pkg);
  return run(
    {
      npmPackages: isArray ? pkg : [pkg]
    },
    { json: true, showNotFound: true }
  ).then((res) => {
    const { npmPackages = {} } = JSON.parse(res) || {};
    return isArray ? pkg.map((e) => npmPackages[e] || "Not Found") : npmPackages[pkg];
  });
}
function getGlobalNpmPackageVersion(pkg) {
  const isArray = Array.isArray(pkg);
  return run(
    {
      npmGlobalPackages: isArray ? pkg : [pkg]
    },
    { json: true, showNotFound: true }
  ).then((res) => {
    const { npmGlobalPackages = {} } = JSON.parse(res) || {};
    return isArray ? pkg.map((e) => npmGlobalPackages[e] || "Not Found") : npmGlobalPackages[pkg];
  });
}
function getGitBranch() {
  return new Promise((resolve, reject) => {
    exec("git branch --show-current", (err, stdout) => {
      if (err) {
        exec("git branch", (err2, stdout2) => {
          if (err2) {
            reject(err2);
          } else {
            resolve(
              stdout2.split("\n").map((e) => e.replace("* ", "")).join("").trim()
            );
          }
        });
      } else {
        resolve(stdout.trim());
      }
    });
  });
}
function getGitRepo() {
  return new Promise((resolve, reject) => {
    exec("git config --get remote.origin.url", (err, stdout) => {
      if (err)
        reject(err);
      else
        resolve(stdout.trim());
    });
  });
}
export {
  getCPUInfo,
  getGitBranch,
  getGitRepo,
  getGlobalNpmPackageVersion,
  getMemoryInfo,
  getNodeVersion,
  getNpmPackageVersion,
  getNpmVersion,
  getOSInfo,
  getPnpmVersion,
  getYarnVersion
};
