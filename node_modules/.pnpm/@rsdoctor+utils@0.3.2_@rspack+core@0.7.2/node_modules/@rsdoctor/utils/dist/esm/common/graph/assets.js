import { Client, Constants } from "@rsdoctor/types";
import { getChunksByAsset } from "./chunk";
import { getModulesByAsset } from "./modules";
const EXT = "js|css|html";
const hashPattern = /[a-z|A-Z|0-9]{4,32}/;
const hashSeparatorPattern = /[-|.]/;
const fileExtensionPattern = /(?:\.[a-zï½œA-Z|0-9]{2,}){1,}/;
const filenamePattern = new RegExp(
  `(.*)${hashSeparatorPattern.source}${hashPattern.source}(${fileExtensionPattern.source})$`
);
function formatAssetName(assetName, fileConfig) {
  const splitFilesList = fileConfig?.split(".");
  let outputFileTailName = "";
  let unHashedFileName = assetName;
  if (splitFilesList?.length && splitFilesList.length >= 3 && splitFilesList[splitFilesList.length - 2]?.indexOf("[") < 0 && EXT.indexOf(splitFilesList[splitFilesList.length - 1]) > -1) {
    outputFileTailName = splitFilesList[splitFilesList.length - 2];
    const _regPattern = /(.*)(\.[a-f0-9]{4,32})([^.]*.[^.]+){2,}/g;
    unHashedFileName = assetName.replace(_regPattern, "$1");
    return `${unHashedFileName}.${outputFileTailName}.${assetName.substring(
      assetName.lastIndexOf(".") + 1
    )}`;
  }
  return assetName.replace(filenamePattern, "$1$2");
}
function isAssetMatchExtension(asset, ext) {
  return asset.path.slice(-ext.length) === ext;
}
function isAssetMatchExtensions(asset, exts) {
  if (!exts.length)
    return false;
  return exts.some((ext) => isAssetMatchExtension(asset, ext));
}
function filterAssetsByExtensions(assets, exts) {
  if (typeof exts === "string")
    return assets.filter((e) => isAssetMatchExtension(e, exts));
  if (Array.isArray(exts)) {
    return assets.filter((e) => isAssetMatchExtensions(e, exts));
  }
  return [];
}
function filterAssets(assets, filterOrExtensions) {
  if (filterOrExtensions) {
    if (typeof filterOrExtensions === "function") {
      assets = assets.filter(filterOrExtensions);
    } else {
      assets = filterAssetsByExtensions(assets, filterOrExtensions);
    }
  }
  return assets;
}
function getAssetsSizeInfo(assets, chunks, options = {}) {
  const { withFileContent = true, filterOrExtensions } = options;
  assets = assets.filter(
    (e) => !isAssetMatchExtensions(e, Constants.MapExtensions)
  );
  if (filterOrExtensions) {
    assets = filterAssets(assets, filterOrExtensions);
  }
  if (assets.length) {
    return {
      count: assets.length,
      size: assets.reduce((t, c) => t + c.size, 0),
      files: assets.map((e) => ({
        path: e.path,
        size: e.size,
        initial: isInitialAsset(e, chunks),
        content: withFileContent ? e.content : void 0
      }))
    };
  }
  return {
    count: 0,
    size: 0,
    files: []
  };
}
function isInitialAsset(asset, chunks) {
  const cks = getChunksByAsset(asset, chunks);
  return cks.some((e) => Boolean(e.initial));
}
function getInitialAssetsSizeInfo(assets, chunks, options = {}) {
  if (options.filterOrExtensions) {
    assets = filterAssets(assets, options.filterOrExtensions);
  }
  return getAssetsSizeInfo(assets, chunks, {
    ...options,
    filterOrExtensions: (asset) => isInitialAsset(asset, chunks)
  });
}
function getAssetsDiffResult(baseline, current) {
  return {
    all: {
      total: diffAssetsByExtensions(baseline, current)
    },
    js: {
      total: diffAssetsByExtensions(baseline, current, Constants.JSExtension),
      initial: diffAssetsByExtensions(
        baseline,
        current,
        Constants.JSExtension,
        true
      )
    },
    css: {
      total: diffAssetsByExtensions(baseline, current, Constants.CSSExtension),
      initial: diffAssetsByExtensions(
        baseline,
        current,
        Constants.CSSExtension,
        true
      )
    },
    imgs: {
      total: diffAssetsByExtensions(baseline, current, Constants.ImgExtensions)
    },
    html: {
      total: diffAssetsByExtensions(baseline, current, Constants.HtmlExtension)
    },
    media: {
      total: diffAssetsByExtensions(
        baseline,
        current,
        Constants.MediaExtensions
      )
    },
    fonts: {
      total: diffAssetsByExtensions(
        baseline,
        current,
        Constants.FontExtensions
      )
    },
    others: {
      total: diffAssetsByExtensions(
        baseline,
        current,
        (asset) => !isAssetMatchExtensions(
          asset,
          [
            Constants.JSExtension,
            Constants.CSSExtension,
            Constants.HtmlExtension
          ].concat(
            Constants.ImgExtensions,
            Constants.MediaExtensions,
            Constants.FontExtensions,
            Constants.MapExtensions
          )
        )
      )
    }
  };
}
function diffSize(bSize, cSize) {
  const isEqual = bSize === cSize;
  const percent = isEqual ? 0 : bSize === 0 ? 100 : Math.abs(cSize - bSize) / bSize * 100;
  const state = isEqual ? Client.RsdoctorClientDiffState.Equal : bSize > cSize ? Client.RsdoctorClientDiffState.Down : Client.RsdoctorClientDiffState.Up;
  return { percent, state };
}
function diffAssetsByExtensions(baseline, current, filterOrExtensions, isInitial = false) {
  const { size: bSize, count: bCount } = isInitial ? getInitialAssetsSizeInfo(baseline.assets, baseline.chunks, {
    filterOrExtensions
  }) : getAssetsSizeInfo(baseline.assets, baseline.chunks, {
    filterOrExtensions
  });
  let cSize;
  let cCount;
  if (baseline === current) {
    cSize = bSize;
    cCount = bCount;
  } else {
    const { size, count } = isInitial ? getInitialAssetsSizeInfo(current.assets, current.chunks, {
      filterOrExtensions
    }) : getAssetsSizeInfo(current.assets, current.chunks, {
      filterOrExtensions
    });
    cSize = size;
    cCount = count;
  }
  const { percent, state } = diffSize(bSize, cSize);
  return {
    size: {
      baseline: bSize,
      current: cSize
    },
    count: {
      baseline: bCount,
      current: cCount
    },
    percent,
    state
  };
}
function getAssetsSummary(assets, chunks, options = {}) {
  const jsOpt = {
    ...options,
    filterOrExtensions: Constants.JSExtension
  };
  const cssOpt = {
    ...options,
    filterOrExtensions: Constants.CSSExtension
  };
  const imgOpt = {
    ...options,
    filterOrExtensions: Constants.ImgExtensions
  };
  const htmlOpt = {
    ...options,
    filterOrExtensions: Constants.HtmlExtension
  };
  const mediaOpt = {
    ...options,
    filterOrExtensions: Constants.MediaExtensions
  };
  const fontOpt = {
    ...options,
    filterOrExtensions: Constants.FontExtensions
  };
  const otherOpt = {
    ...options,
    filterOrExtensions: (asset) => !isAssetMatchExtensions(
      asset,
      [
        Constants.JSExtension,
        Constants.CSSExtension,
        Constants.HtmlExtension
      ].concat(
        Constants.ImgExtensions,
        Constants.MediaExtensions,
        Constants.FontExtensions,
        Constants.MapExtensions
      )
    )
  };
  return {
    all: {
      total: getAssetsSizeInfo(assets, chunks, options)
    },
    js: {
      total: getAssetsSizeInfo(assets, chunks, jsOpt),
      initial: getInitialAssetsSizeInfo(assets, chunks, jsOpt)
    },
    css: {
      total: getAssetsSizeInfo(assets, chunks, cssOpt),
      initial: getInitialAssetsSizeInfo(assets, chunks, cssOpt)
    },
    imgs: {
      total: getAssetsSizeInfo(assets, chunks, imgOpt)
    },
    html: {
      total: getAssetsSizeInfo(assets, chunks, htmlOpt)
    },
    media: {
      total: getAssetsSizeInfo(assets, chunks, mediaOpt)
    },
    fonts: {
      total: getAssetsSizeInfo(assets, chunks, fontOpt)
    },
    others: {
      total: getAssetsSizeInfo(assets, chunks, otherOpt)
    }
  };
}
function getAssetDetails(assetPath, assets, chunks, modules) {
  const asset = assets.find((e) => e.path === assetPath);
  return {
    asset,
    chunks: getChunksByAsset(asset, chunks),
    modules: getModulesByAsset(asset, chunks, modules)
  };
}
export {
  diffAssetsByExtensions,
  diffSize,
  filterAssets,
  filterAssetsByExtensions,
  formatAssetName,
  getAssetDetails,
  getAssetsDiffResult,
  getAssetsSizeInfo,
  getAssetsSummary,
  getInitialAssetsSizeInfo,
  isAssetMatchExtension,
  isAssetMatchExtensions,
  isInitialAsset
};
