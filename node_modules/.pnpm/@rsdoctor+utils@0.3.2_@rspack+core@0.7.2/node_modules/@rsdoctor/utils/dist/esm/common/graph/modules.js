import { getChunksByChunkIds, getChunkIdsByAsset } from "./chunk";
import {
  getDependenciesByModule,
  getDependencyByPackageData
} from "./dependency";
function getModulesByAsset(asset, chunks, modules) {
  const ids = getChunkIdsByAsset(asset);
  const cks = getChunksByChunkIds(ids, chunks);
  const res = getModulesByChunks(cks, modules);
  return res;
}
function getModuleIdsByChunk(chunk) {
  const { modules = [] } = chunk;
  return modules;
}
function getModuleIdsByModulesIds(moduleIds, modules) {
  return moduleIds.map((id) => modules.find((m) => m.id === id)).filter(Boolean);
}
function getModulesByChunk(chunk, modules) {
  const ids = getModuleIdsByChunk(chunk);
  return ids.map((id) => modules.find((e) => e.id === id)).filter(Boolean);
}
function getModulesByChunks(chunks, modules) {
  const res = [];
  chunks.forEach((chunk) => {
    getModulesByChunk(chunk, modules).forEach((md) => {
      if (!res.filter((_m) => _m.id === md.id).length)
        res.push(md);
    });
  });
  return res;
}
function getModuleByDependency(dep, modules) {
  return modules.find((item) => item.id === dep.module);
}
function filterModulesAndDependenciesByPackageDeps(deps, dependencies, modules) {
  const _dependencies = [];
  const _modules = [];
  for (let i = 0; i < deps.length; i++) {
    const dep = getDependencyByPackageData(deps[i], dependencies);
    if (dep) {
      _dependencies.push(dep);
      const module = getModuleByDependency(dep, modules);
      if (module) {
        _modules.push(module);
      }
    }
  }
  return {
    dependencies: _dependencies,
    modules: _modules
  };
}
function getModuleDetails(moduleId, modules, dependencies) {
  const module = modules.find((e) => e.id === moduleId);
  return {
    module,
    dependencies: getDependenciesByModule(module, dependencies)
  };
}
export {
  filterModulesAndDependenciesByPackageDeps,
  getModuleByDependency,
  getModuleDetails,
  getModuleIdsByChunk,
  getModuleIdsByModulesIds,
  getModulesByAsset,
  getModulesByChunk,
  getModulesByChunks
};
