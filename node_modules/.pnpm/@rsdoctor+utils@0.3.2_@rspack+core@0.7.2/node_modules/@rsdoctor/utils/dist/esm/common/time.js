import { hrtime } from "process";
function toFixedDigits(num, digits = 2) {
  if (digits === 0) {
    return Math.floor(num);
  }
  return +num.toFixed(digits);
}
function getUnit(num, type) {
  let unit;
  if (type === "m") {
    unit = num > 1 ? "mins" : "min";
  } else {
    unit = num > 1 ? "hours" : "hour";
  }
  return unit;
}
function formatCosts(costs) {
  costs = Number(costs);
  if (costs >= 1e3) {
    const sec = costs / 1e3;
    if (sec >= 60) {
      let mins = sec / 60;
      if (mins >= 60) {
        const hours = toFixedDigits(mins / 60, 0);
        const restMins = toFixedDigits(mins % 60, 1);
        const hUnit = getUnit(hours, "h");
        if (restMins > 0) {
          return `${hours}${hUnit} ${restMins}${getUnit(restMins, "m")}`;
        }
        return `${hours}${hUnit}`;
      }
      mins = toFixedDigits(mins, 0);
      const mUnit = getUnit(mins, "m");
      const restSec = toFixedDigits(sec % 60, 0);
      if (restSec > 0) {
        return `${mins}${mUnit} ${restSec}s`;
      }
      return `${mins}${mUnit}`;
    }
    return `${toFixedDigits(sec, 1)}s`;
  }
  if (costs >= 10) {
    return `${+toFixedDigits(costs, 0)}ms`;
  }
  if (costs >= 1) {
    return `${+toFixedDigits(costs, 1)}ms`;
  }
  let r = +toFixedDigits(costs, 2);
  if (r === 0) {
    r = +toFixedDigits(costs, 3);
  }
  return `${r}ms`;
}
function getCurrentTimestamp(start, startHRTime) {
  const endHRTime = hrtime(startHRTime);
  const end = start + endHRTime[0] * 1e3 + (process.env.VITEST ? Math.round(endHRTime[1] / 1e6) : endHRTime[1] / 1e6);
  return end;
}
export {
  formatCosts,
  getCurrentTimestamp,
  getUnit,
  toFixedDigits
};
