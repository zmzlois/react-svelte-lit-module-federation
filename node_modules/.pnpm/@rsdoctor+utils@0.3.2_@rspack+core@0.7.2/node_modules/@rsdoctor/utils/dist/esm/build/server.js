import connect from "connect";
import http from "http";
import os from "os";
import gp from "get-port";
import { execSync } from "child_process";
import { random } from "../common/algorithm";
const defaultPort = random(3e3, 8999);
async function getPort(expectPort) {
  return gp({ port: expectPort });
}
const createGetPortSyncFunctionString = (expectPort) => `
(() => {
const net = require('net');

function getPort(expectPort) {
  return new Promise((resolve, reject) => {
    const server = net.createServer();
    server.unref();
    server.on('error', reject);
    server.listen(expectPort, () => {
      const { port } = server.address();
      server.close(() => {
        resolve(port);
      });
    });
  });
}

async function getAvailablePort(expectPort) {
  let port = expectPort;
  while (true) {
    try {
      const res = await getPort(port);
      return res;
    } catch (error) {
      port += Math.floor(Math.random() * 100 + 1);
    }
  }
}

getAvailablePort(${expectPort}).then(port => process.stdout.write(port.toString()));
})();
`.trim();
function getPortSync(expectPort) {
  const statement = os.EOL === "\n" ? createGetPortSyncFunctionString(expectPort) : createGetPortSyncFunctionString(expectPort).replace(/\n/g, "");
  const port = execSync(`node -e "${statement}"`, { encoding: "utf-8" });
  return Number(port);
}
function createApp() {
  return connect();
}
async function createServer(port) {
  const app = createApp();
  const server = http.createServer(app);
  const res = {
    app,
    server,
    port,
    close() {
      return new Promise((resolve, reject) => {
        if ("closeAllConnections" in server) {
          server.closeAllConnections();
        }
        if ("closeIdleConnections" in server) {
          server.closeIdleConnections();
        }
        server.close((err) => {
          if (err)
            reject(err);
          resolve();
        });
      });
    }
  };
  return new Promise((resolve) => {
    server.listen(port, () => {
      resolve(res);
    });
  });
}
export {
  createApp,
  createGetPortSyncFunctionString,
  createServer,
  defaultPort,
  getPort,
  getPortSync
};
