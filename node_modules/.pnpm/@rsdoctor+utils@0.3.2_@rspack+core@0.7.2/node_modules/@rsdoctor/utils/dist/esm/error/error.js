import { codeFrameColumns } from "@babel/code-frame";
import { Err } from "@rsdoctor/types";
import { Instance } from "chalk";
import deepEql from "deep-eql";
import { isNil } from "lodash";
import stripAnsi from "strip-ansi";
import { transform } from "./transform";
import { insertSpace, toLevel } from "./utils";
let id = 1;
class DevToolError extends Error {
  constructor(title, message, opts) {
    super(message);
    this._controller = {
      noStack: true,
      noColor: false
    };
    this.id = id++;
    this.title = title;
    this.code = opts?.code;
    this.hint = opts?.hint;
    this.stack = opts?.stack;
    this.detail = opts?.detail;
    this.fixData = opts?.fixData;
    this.category = opts?.category;
    this.referenceUrl = opts?.referenceUrl;
    this._level = opts?.level ? toLevel(opts.level) : Err.ErrorLevel.Error;
    this._codeFrame = opts?.codeFrame;
    this.setControllerOption(opts?.controller ?? {});
  }
  static from(err, opt) {
    if (err instanceof DevToolError) {
      return err;
    }
    return transform(err, opt);
  }
  get level() {
    return Err.ErrorLevel[this._level];
  }
  get path() {
    return this._codeFrame?.filePath;
  }
  set path(file) {
    if (!file) {
      return;
    }
    if (this._codeFrame) {
      this._codeFrame.filePath = file;
      return;
    }
    this._codeFrame = {
      filePath: file
    };
  }
  get codeFrame() {
    return this._codeFrame;
  }
  printCodeFrame(print) {
    const msgs = [];
    const { _codeFrame: codeFrameOpt, _controller: controller } = this;
    if (!codeFrameOpt) {
      return msgs;
    }
    if ("start" in codeFrameOpt && codeFrameOpt.start) {
      const { filePath, start } = codeFrameOpt;
      msgs.push(
        `
 ${print.red(print.bold("File: "))}${print.bold(filePath)}:${start.line}${start.column ? `:${start.column}` : ""}`
      );
      if ("fileContent" in codeFrameOpt) {
        const { end, fileContent } = codeFrameOpt;
        msgs.push(
          codeFrameColumns(
            fileContent,
            {
              start,
              end
            },
            {
              highlightCode: !controller.noColor
            }
          )
        );
      } else if ("lineText" in codeFrameOpt) {
        const { length, lineText } = codeFrameOpt;
        let lineCodeFrame = codeFrameColumns(
          lineText,
          {
            start: {
              line: 1,
              column: start.column
            },
            end: {
              line: 1,
              column: isNil(start.column) || isNil(length) ? void 0 : start.column + length
            }
          },
          {
            highlightCode: !controller.noColor
          }
        );
        if (start.line > 1) {
          lineCodeFrame = lineCodeFrame.replace(" 1 |", ` ${start.line} |`);
          if (start.line >= 10) {
            lineCodeFrame = insertSpace(
              lineCodeFrame,
              2,
              String(start.line).length - 1
            );
          }
        }
        msgs.push(lineCodeFrame);
      }
    } else {
      msgs.push(
        `
 ${print.red(print.bold("File: "))}${print.bold(
          codeFrameOpt.filePath
        )}
`
      );
    }
    return msgs;
  }
  toString() {
    const msgs = [];
    const {
      code,
      title,
      message,
      hint,
      referenceUrl,
      _controller: controller
    } = this;
    const print = controller.noColor ? new Instance({ level: 0 }) : new Instance({ level: 3 });
    const mainColorPrint = this._level === Err.ErrorLevel.Error ? print.red : print.yellow;
    const codeText = code ? `${mainColorPrint.blue(code)}:` : "";
    msgs.push(
      mainColorPrint.bold(
        `[${codeText}${this.level}:${title.toUpperCase()}] `
      ) + message
    );
    msgs.push(...this.printCodeFrame(print));
    if (hint || referenceUrl) {
      msgs.push("");
    }
    if (hint) {
      msgs.push(` ${print.blue(`HINT: ${hint}`)}`);
    }
    if (referenceUrl) {
      msgs.push(print.magenta.bold(` See: ${referenceUrl}`));
    }
    if (!controller.noStack && this.stack) {
      msgs.push(print.red.bold(` Error Stack:
${this.stack}
`));
    }
    return msgs.join("\n");
  }
  toData() {
    return {
      ...this.detail,
      id: this.id,
      category: this.category,
      description: stripAnsi(this.detail?.description ?? this.message),
      title: this.title.toUpperCase(),
      code: this.code,
      level: this.level.toLowerCase()
    };
  }
  toError() {
    const error = new Error();
    error.message = this.toString();
    error.name = this.name;
    error.stack = this.stack;
    return error;
  }
  /**
   * for json stringify
   */
  toJSON() {
    return {
      message: this.toString(),
      name: this.name,
      stack: this.stack
    };
  }
  setControllerOption(opt) {
    this._controller = {
      noStack: opt.noStack ?? this._controller.noStack ?? true,
      noColor: opt.noColor ?? this._controller.noColor ?? false
    };
  }
  setCodeFrame(opt) {
    this._codeFrame = opt;
  }
  isSame(error) {
    return this.code === error.code && this.message === error.message && this.hint === error.hint && this.level === error.level && this.title === error.title && this.referenceUrl === error.referenceUrl && this.code === error.code && deepEql(this.codeFrame, error.codeFrame);
  }
}
export {
  DevToolError
};
