import { isEmpty, last, compact } from "lodash";
const PACKAGE_PREFIX = /(?:node_modules|~)(?:\/\.pnpm)?/;
const PACKAGE_SLUG = /[a-zA-Z0-9]+(?:[-|_|.]+[a-zA-Z0-9]+)*/;
const VERSION = /@[\w|\-|_|.]+/;
const VERSION_NUMBER = "@([\\d.]+)";
const MODULE_PATH_PACKAGES = new RegExp(
  [
    // match dependency directory (eg: `node_modules/`, `node_modules/.pnpm/`)
    `(?:${PACKAGE_PREFIX.source}/)`,
    // match package name
    "(?:",
    // match `@organization/` or `@organization+`(pnpm)
    `(?:@${PACKAGE_SLUG.source}[/|+])?`,
    // match github.com+organization+
    `(?:${PACKAGE_SLUG.source}\\+)*`,
    // match package name
    `(?:${PACKAGE_SLUG.source})`,
    // match version
    `(?:${VERSION.source})?`,
    ")",
    // Match pnpm peer dependencies (eg: package-a@version_package-b@version)
    "(?:_",
    `(?:@${PACKAGE_SLUG.source}[/|+])?`,
    `(?:${PACKAGE_SLUG.source})`,
    `(?:@${PACKAGE_SLUG.source})?`,
    ")*",
    "/"
  ].join(""),
  "g"
);
const PACKAGE_PATH_NAME = /(?:(?:node_modules|~)(?:\/\.pnpm)?\/)(?:((?:@[a-zA-Z0-9]+(?:[-|_|.]+[a-zA-Z0-9]+)*[/|+])?(?:(?:[a-zA-Z0-9]+(?:[-|_|.]+[a-zA-Z0-9]+)*\+)*)(?:[a-zA-Z0-9]+(?:[-|_|.]+[a-zA-Z0-9]+)*))(?:@[\w|\-|_|.]+)?)(?:_((?:@[a-zA-Z0-9]+(?:[-|_|.]+[a-zA-Z0-9]+)*[/|+])?(?:[a-zA-Z0-9]+(?:[-|_|.]+[a-zA-Z0-9]+)*))(?:@[a-zA-Z0-9]+(?:[-|_|.]+[a-zA-Z0-9]+)*))*\//gm;
const uniqLast = (data) => {
  const res = [];
  data.forEach((item, index) => {
    if (!data.slice(index + 1).includes(item)) {
      res.push(item);
    }
  });
  return res;
};
const getPackageMetaFromModulePath = (modulePath) => {
  const paths = modulePath.match(MODULE_PATH_PACKAGES);
  if (!paths) {
    return { name: "", version: "" };
  }
  const names = uniqLast(
    paths.flatMap((packagePath) => {
      const found = packagePath.matchAll(PACKAGE_PATH_NAME);
      if (!found) {
        return [];
      }
      const paksArray = compact([...found].flat());
      return paksArray.slice(1).filter(Boolean).map((name2) => name2.replace(/\+/g, "/"));
    })
  );
  if (isEmpty(names)) {
    return { name: "", version: "" };
  }
  const name = last(names);
  const pattern = new RegExp(`(.*)(${last(paths)}).*`);
  const path = modulePath.replace(pattern, "$1$2").replace(/\/$/, "");
  return {
    name,
    version: path && name ? path.match(new RegExp(`${name}${VERSION_NUMBER}`))?.flat().slice(1)?.[0] || "" : ""
  };
};
export {
  MODULE_PATH_PACKAGES,
  PACKAGE_PATH_NAME,
  getPackageMetaFromModulePath
};
