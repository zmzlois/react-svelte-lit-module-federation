function getPluginHooks(plugin) {
  return Object.keys(plugin);
}
function getPluginTapNames(plugin) {
  const hooks = getPluginHooks(plugin);
  const tapNames = /* @__PURE__ */ new Set();
  hooks.forEach((hook) => {
    plugin[hook].forEach((data) => {
      tapNames.add(data.tapName);
    });
  });
  return [...tapNames];
}
function getPluginSummary(plugin) {
  return {
    hooks: getPluginHooks(plugin),
    tapNames: getPluginTapNames(plugin)
  };
}
function getPluginData(plugin, selectedHooks = [], selectedTapNames = []) {
  const hooks = getPluginHooks(plugin).filter((hook) => {
    if (selectedHooks.length && selectedHooks.indexOf(hook) === -1) {
      return false;
    }
    return true;
  });
  if (!hooks.length)
    return [];
  const tapNames = getPluginTapNames(plugin);
  return tapNames.reduce((total, tapName) => {
    if (selectedTapNames.length && selectedTapNames.indexOf(tapName) === -1) {
      return total;
    }
    hooks.forEach((hook) => {
      const hookData = plugin[hook].filter((e) => e.tapName === tapName);
      if (hookData.length === 0)
        return;
      total.push({
        tapName,
        hook,
        data: hookData.map((e) => {
          return {
            startAt: e.startAt,
            endAt: e.endAt,
            costs: e.costs,
            type: e.type
          };
        })
      });
    });
    return total;
  }, []);
}
export {
  getPluginData,
  getPluginHooks,
  getPluginSummary,
  getPluginTapNames
};
