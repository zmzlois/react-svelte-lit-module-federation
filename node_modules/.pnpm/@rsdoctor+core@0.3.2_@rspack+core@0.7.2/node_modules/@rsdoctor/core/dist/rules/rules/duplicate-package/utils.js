"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var utils_exports = {};
__export(utils_exports, {
  getErrorDetail: () => getErrorDetail,
  getErrorMsg: () => getErrorMsg
});
module.exports = __toCommonJS(utils_exports);
var import_path = __toESM(require("path"));
var import_bytes = __toESM(require("bytes"));
function getErrorMsg(packages, root) {
  const pkgName = packages[0].name;
  let message = `Multiple packages of ${pkgName} found:
`;
  for (const pkg of packages) {
    message += `  ${pkg.version} ${(0, import_bytes.default)(
      pkg.getSize().parsedSize
    )} ${import_path.default.relative(root, pkg.root)}
`;
  }
  return message.slice(0, -1);
}
function getErrorDetail(pkg, pkgGraph) {
  function getImported(pkg2, ans) {
    const dependencies = pkgGraph.getDependenciesFromPackage(pkg2);
    for (const dep of dependencies) {
      if (!dep.refDependency) {
        continue;
      }
      if (ans.some((dep2) => dep2.dependency === pkg2)) {
        continue;
      }
      if (!dep.package) {
        return ans.concat(dep);
      }
      return getImported(dep.package, ans.concat(dep));
    }
    return ans;
  }
  const packageImportLinks = getImported(pkg, []);
  return {
    target: {
      name: pkg.name,
      version: pkg.version,
      root: pkg.root
    },
    targetSize: {
      sourceSize: pkg.getSize().sourceSize,
      parsedSize: pkg.getSize().parsedSize
    },
    dependencies: packageImportLinks.map((item) => {
      return {
        dependencyId: item.refDependency.id,
        group: item.package ? `${item.package.name}@${item.package.version}` : void 0
      };
    })
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getErrorDetail,
  getErrorMsg
});
