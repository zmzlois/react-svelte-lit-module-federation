"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var linter_exports = {};
__export(linter_exports, {
  Linter: () => Linter,
  LinterType: () => import_types.Linter
});
module.exports = __toCommonJS(linter_exports);
var import_types = require("@rsdoctor/types");
var import_rule = require("./rule");
var import_rules = require("./rules");
var import_utils = require("./utils");
class Linter {
  constructor({
    rules,
    extends: extendRules,
    level
  } = {}) {
    this.rules = [];
    this.rules = this.getRules(
      rules ?? {},
      extendRules ?? [],
      (0, import_utils.toSeverity)(level ?? "Error", import_types.Linter.Severity.Error)
    );
  }
  getRules(ruleMap, extendRules, filterLevel) {
    const outside = extendRules.map((item) => import_rule.Rule.from(item));
    const rules = import_rules.rules.map((item) => new import_rule.Rule(item)).concat(outside);
    rules.forEach((rule) => {
      if (ruleMap[rule.title]) {
        rule.setOption(ruleMap[rule.title]);
      }
    });
    return rules.filter((rule) => rule.match(filterLevel));
  }
  async validate(context) {
    const lintResult = {
      errors: [],
      replace: []
    };
    await Promise.all(
      this.rules.map(async (rule) => {
        const result = await rule.validate(context);
        lintResult.errors.push(...result.errors);
        lintResult.replace.push(...result.replace);
      })
    );
    return lintResult;
  }
  async afterValidate(context) {
    await Promise.all(this.rules.map((rule) => rule.afterValidate(context)));
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Linter,
  LinterType
});
