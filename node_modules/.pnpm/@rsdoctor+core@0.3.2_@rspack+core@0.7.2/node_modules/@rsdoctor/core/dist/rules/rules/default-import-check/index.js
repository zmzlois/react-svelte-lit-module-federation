"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var default_import_check_exports = {};
__export(default_import_check_exports, {
  rule: () => rule
});
module.exports = __toCommonJS(default_import_check_exports);
var import_module = require("module");
var import_types = require("@rsdoctor/types");
var import_ruleUtils = require("@rsdoctor/utils/ruleUtils");
var import_utils = require("./utils");
var import_rule = require("../../rule");
const title = "default-import-check";
const rule = (0, import_rule.defineRule)(() => {
  const parserOpt = {
    ecmaVersion: 6
  };
  const exportsDefault = import_ruleUtils.parser.internal.parseExpressionAt(
    "exports.default",
    0,
    parserOpt
  );
  const moduleExportsDefault = import_ruleUtils.parser.internal.parseExpressionAt(
    "module.exports.default",
    0,
    parserOpt
  );
  return {
    meta: {
      code: "E1002",
      title,
      category: "compile",
      severity: import_types.Linter.Severity.Warn,
      defaultConfig: {
        ignore: []
      }
    },
    check({ moduleGraph, report, ruleConfig }) {
      const dependencyWithNode = moduleGraph.getDependencies().filter((dep) => dep.meta.exportsType === "dynamic").filter((dep) => !dep.module.path.includes("node_modules")).filter(
        (dep) => !ruleConfig.ignore.includes(dep.request) && !import_module.builtinModules.includes(dep.request)
      ).filter((dep) => dep.dependency.meta.hasSetEsModuleStatement).filter((dep) => dep.dependency.getProgram()).filter(
        (dep) => !(0, import_utils.hasSameLeftInAssignStatement)(dep.dependency.getProgram(), [
          exportsDefault,
          moduleExportsDefault
        ])
      ).map((dependency) => {
        const { module: module2, request } = dependency;
        const node = module2.getProgram() && (0, import_utils.getDefaultImportByRequest)(module2.getProgram(), request);
        return node ? {
          dependency,
          node
        } : {};
      }).filter((dep) => dep?.dependency);
      for (const { dependency, node } of dependencyWithNode) {
        if (!dependency)
          continue;
        const document = (0, import_utils.getSourceRangeFromTransformedOffset)(
          dependency.module,
          node
        );
        if (!document) {
          continue;
        }
        const message = "Do not to use the default import when you import a cjs module.";
        const canFix = !document.isTransformed && !document.path.includes("node_modules");
        if (canFix) {
          const fixData = (0, import_utils.getFixData)(dependency.module, node, document.range);
          const detail = {
            type: "code-change",
            file: {
              path: document.path,
              actual: document.content,
              line: document.range.start.line,
              expected: (0, import_ruleUtils.getDocument)(document.content).edit(fixData)
            }
          };
          report({
            message,
            document,
            detail,
            suggestions: {
              description: "Use namespace import instead.",
              fixData
            }
          });
        } else {
          const detail = {
            type: "code-view",
            file: {
              path: document.path,
              content: document.content,
              ranges: [node.loc]
            }
          };
          report({
            message,
            document,
            detail
          });
        }
      }
    }
  };
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  rule
});
