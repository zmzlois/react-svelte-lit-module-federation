"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var duplicate_package_exports = {};
__export(duplicate_package_exports, {
  rule: () => rule
});
module.exports = __toCommonJS(duplicate_package_exports);
var import_types = require("@rsdoctor/types");
var import_semver = require("semver");
var import_types2 = require("./types");
var import_utils = require("./utils");
var import_rule = require("../../rule");
const title = "duplicate-package";
const rule = (0, import_rule.defineRule)(() => ({
  meta: {
    code: "E1001",
    title,
    category: "bundle",
    severity: import_types.Linter.Severity.Warn,
    defaultConfig: {
      checkVersion: "major",
      ignore: []
    }
  },
  check({ packageGraph, report, root, ruleConfig }) {
    const checkVersion = import_types2.CheckVersionMap[ruleConfig.checkVersion];
    const packages = packageGraph.getDuplicatePackages().filter((pkg) => !ruleConfig.ignore.includes(pkg[0].name)).map((pkgs) => {
      return pkgs.filter((current) => {
        const check = pkgs.reduce(
          // eslint-disable-next-line no-bitwise
          (ans, pkg) => ans | import_types2.CheckVersionMap[(0, import_semver.diff)(current.version, pkg.version) ?? "null"],
          0
        );
        return check <= checkVersion;
      }).sort(
        (_packA, _packB) => (0, import_semver.gt)(_packA.version, _packB.version) ? 1 : -1
      );
    }).filter((pkgs) => pkgs.length > 1);
    for (const pkg of packages) {
      const message = (0, import_utils.getErrorMsg)(pkg, root);
      const detail = {
        type: "package-relation",
        packages: pkg.map((item) => (0, import_utils.getErrorDetail)(item, packageGraph))
      };
      report({
        message,
        detail
      });
    }
  }
}));
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  rule
});
