"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var utils_exports = {};
__export(utils_exports, {
  getDefaultImportByRequest: () => getDefaultImportByRequest,
  getFixData: () => getFixData,
  getSourceRangeFromTransformedOffset: () => getSourceRangeFromTransformedOffset,
  hasSameLeftInAssignStatement: () => hasSameLeftInAssignStatement,
  importDeclarationToString: () => importDeclarationToString
});
module.exports = __toCommonJS(utils_exports);
var import_ruleUtils = require("@rsdoctor/utils/ruleUtils");
var import_lodash = require("lodash");
function getDefaultImportByRequest(node, request) {
  return import_ruleUtils.parser.utils.getDefaultImports(node).find((decl) => decl.source.value === request);
}
function hasSameLeftInAssignStatement(node, compare) {
  return node.body.filter(import_ruleUtils.parser.asserts.isExpressionStatement).map((node2) => node2.expression).filter(import_ruleUtils.parser.asserts.isAssignmentExpression).map((node2) => node2.left).find(
    (node2) => compare.some((item) => import_ruleUtils.parser.utils.isSameSemantics(node2, item))
  );
}
function importDeclarationToString(node) {
  const defaultSpecifier = node.specifiers[0];
  const rawRequest = (node.source.raw ?? "").trim();
  return `import * as ${defaultSpecifier.local.name} from ${rawRequest}`;
}
function getFixData(module2, node, originalRange) {
  const { source, transformed } = module2.getSource();
  const document = (0, import_ruleUtils.getDocument)(source);
  const newImportText = importDeclarationToString(node);
  const oldText = transformed.substring(node.start, node.end);
  const hasLastSemi = oldText[oldText.length - 1] === ";";
  return {
    start: document.offsetAt(originalRange.start),
    end: document.offsetAt(originalRange.end),
    newText: hasLastSemi ? `${newImportText};` : newImportText
  };
}
function getSourceRangeFromTransformedOffset(module2, node) {
  const source = module2.getSource();
  const sourceMap = module2.getSourceMap();
  const transformedStart = node.loc.start;
  const transformedEnd = node.loc.end;
  if (!transformedStart || !transformedEnd) {
    return;
  }
  const transformedReport = {
    path: module2.path,
    content: source.transformed,
    isTransformed: true,
    range: {
      start: transformedStart,
      end: transformedEnd
    }
  };
  if (!sourceMap) {
    return transformedReport;
  }
  const sourceRange = module2.getSourceRange(node.loc);
  if ((0, import_lodash.isUndefined)(sourceRange?.start.line) || (0, import_lodash.isUndefined)(sourceRange?.start.column) || (0, import_lodash.isUndefined)(sourceRange?.end?.line) || (0, import_lodash.isUndefined)(sourceRange?.end?.column)) {
    return transformedReport;
  }
  return {
    path: module2.path,
    isTransformed: false,
    content: source.source,
    range: sourceRange
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getDefaultImportByRequest,
  getFixData,
  getSourceRangeFromTransformedOffset,
  hasSameLeftInAssignStatement,
  importDeclarationToString
});
