"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var loader_performance_optimization_exports = {};
__export(loader_performance_optimization_exports, {
  rule: () => rule
});
module.exports = __toCommonJS(loader_performance_optimization_exports);
var import_types = require("@rsdoctor/types");
var import_common = require("@rsdoctor/utils/common");
var import_rule = require("../../rule");
var import_utils = require("./utils");
const title = "loader-performance-optimization";
const rule = (0, import_rule.defineRule)(() => {
  return {
    meta: {
      code: "E1003",
      title,
      category: "compile",
      severity: import_types.Linter.Severity.Warn,
      defaultConfig: {
        ignore: [],
        threshold: 5e3,
        extensions: ["js", "css", "jpg", "jpeg", "png", "gif", "webp", "svg"]
      }
    },
    check({ loader, configs, root, ruleConfig, report }) {
      const { extensions, ignore, threshold } = ruleConfig;
      if (extensions.length === 0)
        return;
      if (loader.length === 0)
        return;
      const { config } = configs.find((e) => e.name === "webpack") || { config: void 0 };
      if (!config) {
        return;
      }
      const cwd = config.context || root;
      const nodeModulesPathRegexp = /\/node_modules\//;
      const resultMap = /* @__PURE__ */ new Map();
      const loaders = loader.map((el) => el.loaders).reduce((t, c) => t.concat(c));
      for (const item of loader) {
        const { path, ext } = item.resource;
        if (!(0, import_utils.match)(ext, extensions))
          continue;
        if (nodeModulesPathRegexp.test(path) || !path.startsWith(cwd)) {
          item.loaders.forEach((el) => {
            if ((0, import_utils.match)(el.loader, ignore))
              return;
            const costs = import_common.Loader.getLoaderCosts(el, loaders);
            const v = {
              ...el,
              __resource__: item.resource,
              __costs__: costs
            };
            if (resultMap.has(el.loader)) {
              resultMap.get(el.loader).push(v);
            } else {
              resultMap.set(el.loader, [v]);
            }
          });
        }
      }
      const sum = (arr) => {
        const v1 = arr.reduce((t, c) => t + c.__costs__, 0);
        const v2 = Math.max.apply(
          null,
          arr.map((e) => e.endAt)
        ) - Math.min.apply(arr.map((e) => e.startAt));
        if (v2 >= v1)
          return v1;
        return v2;
      };
      for (const [loaderName, v] of resultMap.entries()) {
        const nodeModulesFiles = v.filter(
          (e) => nodeModulesPathRegexp.test(e.__resource__.path)
        );
        const nodeModulesFilesCosts = sum(nodeModulesFiles);
        const outofCwdFiles = v.filter(
          (e) => !e.__resource__.path.startsWith(cwd)
        );
        const outofCwdFilesCosts = sum(outofCwdFiles);
        const msg = [
          nodeModulesFilesCosts >= threshold && `<b>${nodeModulesFiles.length}</b> node_modules files(costs: <b>${import_common.Time.formatCosts(
            nodeModulesFilesCosts
          )}</b>)`,
          outofCwdFilesCosts >= threshold && `<b>${outofCwdFiles.length}</b> outof project files(costs: <b>${import_common.Time.formatCosts(
            outofCwdFilesCosts
          )}</b>)`
        ].filter(Boolean).join(" and ");
        if (msg) {
          const message = `<b>${loaderName}</b> has process ${msg}.`;
          report({
            message,
            detail: {
              description: message,
              type: "link"
              // nodeModulesFiles,
              // outofCwdFiles,
            }
          });
        }
      }
    }
  };
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  rule
});
