"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var rule_exports = {};
__export(rule_exports, {
  Rule: () => Rule,
  defineRule: () => defineRule
});
module.exports = __toCommonJS(rule_exports);
var import_types = require("@rsdoctor/types");
var import_lodash = require("lodash");
var import_utils = require("./utils");
class Rule {
  static from(data) {
    return new Rule({
      check: data.check,
      onCheckEnd: data.onCheckEnd,
      meta: {
        ...data.meta,
        code: import_types.Rule.RuleMessageCodeEnumerated.Extend,
        severity: (0, import_utils.toSeverity)(data.meta.severity, import_types.Linter.Severity.Warn)
      }
    });
  }
  constructor(data) {
    this.check = data.check;
    this.meta = data.meta;
    this.onCheckEnd = typeof data.onCheckEnd === "function" ? data.onCheckEnd : import_utils.noop;
    this._severity = this.meta.severity;
    this._config = this.meta.defaultConfig;
  }
  get code() {
    return this.meta.code;
  }
  get title() {
    return this.meta.title;
  }
  get severity() {
    return this._severity;
  }
  get config() {
    return this._config;
  }
  get category() {
    return this.meta.category;
  }
  setOption(opt) {
    let severity;
    let config;
    if (Array.isArray(opt)) {
      severity = (0, import_utils.toSeverity)(opt[0], this.meta.severity);
      config = opt[1];
    } else {
      severity = (0, import_utils.toSeverity)(opt, this.meta.severity);
      config = void 0;
    }
    this._severity = severity;
    this._config = (0, import_lodash.isPlainObject)(config) ? {
      ...this.meta.defaultConfig,
      ...config
    } : config || this.meta.defaultConfig;
  }
  match(level) {
    if (level === import_types.Linter.Severity.Ignore || this.severity === import_types.Linter.Severity.Ignore) {
      return false;
    }
    if (level === import_types.Linter.Severity.Error) {
      return this.severity === import_types.Linter.Severity.Error || this.severity === import_types.Linter.Severity.Warn;
    }
    if (level === import_types.Linter.Severity.Warn) {
      return this.severity === import_types.Linter.Severity.Warn;
    }
    return false;
  }
  async validate(context) {
    const errors = [];
    const replace = [];
    const report = (data, remove) => {
      if (remove) {
        replace.push(remove);
      }
      let severity = data.severity ? (0, import_utils.toSeverity)(data.severity, this.severity) : this.severity;
      const error = {
        ...data,
        code: this.code,
        severity,
        category: this.category,
        title: this.title.toUpperCase()
      };
      if (severity !== import_types.Linter.Severity.Ignore) {
        errors.push(error);
      }
    };
    await this.check({
      ...context,
      ruleConfig: this.config,
      report
    });
    return {
      errors,
      replace
    };
  }
  async afterValidate({
    hooks,
    validateResult,
    data
  }) {
    if (this.onCheckEnd === import_utils.noop)
      return;
    await this.onCheckEnd({
      data: {
        ...data,
        ruleConfig: this.config
      },
      hooks,
      validateResult
    });
  }
}
function defineRule(ruleCreator) {
  return ruleCreator();
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Rule,
  defineRule
});
