"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var errors_exports = {};
__export(errors_exports, {
  InternalErrorReporterPlugin: () => InternalErrorReporterPlugin
});
module.exports = __toCommonJS(errors_exports);
var import_types = require("@rsdoctor/types");
var import_base = require("./base");
var import_error = require("@rsdoctor/utils/error");
class InternalErrorReporterPlugin extends import_base.InternalBasePlugin {
  constructor() {
    super(...arguments);
    this.name = "error-reporter";
    this.done = async (stats) => {
      const tasks = [];
      const statsData = stats.toJson({
        all: false,
        errors: true,
        warnings: true
      });
      if (stats.hasErrors()) {
        tasks.push(this.reportErrors(statsData.errors || []));
      }
      if (stats.hasWarnings()) {
        tasks.push(this.reportWarnings(statsData.warnings || []));
      }
      await Promise.all(tasks);
    };
  }
  apply(compiler) {
    compiler.hooks.done.tapPromise(this.tapPreOptions, this.done);
  }
  handleWebpackError(err, category, level) {
    return import_error.DevToolError.from(err, {
      category,
      code: import_types.Rule.RuleMessageCodeEnumerated.Overlay,
      controller: { noStack: false },
      detail: {
        stack: "stack" in err ? err.stack : err.message
      },
      level
    });
  }
  async reportWarnings(warnings) {
    const arr = warnings.map((warning) => {
      return this.handleWebpackError(
        warning,
        import_types.Rule.RuleMessageCategory.Compile,
        "Warn"
      );
    });
    this.sdk.reportError(arr);
  }
  async reportErrors(errors) {
    const arr = errors.map((err) => {
      return this.handleWebpackError(
        err,
        import_types.Rule.RuleMessageCategory.Bundle,
        "Error"
      );
    });
    this.sdk.reportError(arr);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  InternalErrorReporterPlugin
});
