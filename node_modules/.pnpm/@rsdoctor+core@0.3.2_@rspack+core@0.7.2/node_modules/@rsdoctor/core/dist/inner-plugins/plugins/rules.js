"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var rules_exports = {};
__export(rules_exports, {
  InternalRulesPlugin: () => InternalRulesPlugin
});
module.exports = __toCommonJS(rules_exports);
var import_plugins = require("../plugins");
var import_rules = require("../../rules");
var import_error = require("@rsdoctor/utils/error");
var import_lodash = require("lodash");
class InternalRulesPlugin extends import_plugins.InternalBasePlugin {
  constructor() {
    super(...arguments);
    this.name = "rules";
    this.done = async (stats) => {
      await this.lint(stats.compilation);
    };
  }
  apply(compiler) {
    compiler.hooks.done.tapPromise(this.tapPreOptions, this.done);
  }
  async lint(compilation) {
    const options = this.options ?? {};
    const linter = new import_rules.Linter(options.linter);
    const result = await linter.validate(this.sdk.getRuleContext({}));
    const validateErrors = result.errors.map(
      (err) => import_error.DevToolError.from(err, {
        detail: err.detail,
        controller: {
          noColor: true
        }
      })
    );
    const errors = validateErrors.filter((item) => item.level === "Error");
    const warnings = validateErrors.filter((item) => item.level === "Warn");
    const toWebpackError = (err) => err.toError();
    result.replace.forEach((item) => {
      if ((0, import_lodash.isArray)(compilation.errors) && compilation.errors.includes(item)) {
        (0, import_lodash.pull)(compilation.errors, item);
      }
      if ((0, import_lodash.isArray)(compilation.warnings) && compilation.warnings.includes(item)) {
        (0, import_lodash.pull)(compilation.warnings, item);
      }
    });
    if ((0, import_lodash.isArray)(compilation.errors)) {
      errors.forEach((err) => {
        compilation.warnings.push(toWebpackError(err));
      });
    }
    if ((0, import_lodash.isArray)(compilation.warnings)) {
      warnings.forEach((err) => {
        compilation.warnings.push(toWebpackError(err));
      });
    }
    this.sdk.reportError(validateErrors);
    await linter.afterValidate({
      data: this.sdk.getRuleContext({}),
      validateResult: result,
      hooks: {
        afterSaveManifest: this.sdk.hooks.afterSaveManifest
      }
    });
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  InternalRulesPlugin
});
