"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ensureModulesChunkGraph_exports = {};
__export(ensureModulesChunkGraph_exports, {
  ensureModulesChunksGraphFn: () => ensureModulesChunksGraphFn
});
module.exports = __toCommonJS(ensureModulesChunkGraph_exports);
var import_path = __toESM(require("path"));
var import_types2 = require("@rsdoctor/types");
var import_build = require("@rsdoctor/utils/build");
var import_logger = require("@rsdoctor/utils/logger");
var import_fs_extra = __toESM(require("fs-extra"));
var import_build2 = require("../../build-utils/build");
var import_common = require("../../build-utils/common");
var import_constants = require("../constants");
const ensureModulesChunksGraphFn = (compiler, _this) => {
  if (_this._modulesGraphApplied)
    return;
  _this._modulesGraphApplied = true;
  const context = {
    astCache: /* @__PURE__ */ new Map(),
    packagePathMap: /* @__PURE__ */ new Map(),
    getSourceMap: (file) => {
      return _this.sdk.getSourceMap(file);
    }
  };
  compiler.hooks.done.tapPromise(
    (0, import_constants.internalPluginTapPreOptions)("moduleGraph"),
    async (_stats) => {
      const stats = _stats;
      const statsJson = stats.toJson();
      (0, import_logger.debug)(import_build.Process.getMemoryUsageMessage, "[Before Generate ModuleGraph]");
      _this.chunkGraph = import_build2.Chunks.chunkTransform(/* @__PURE__ */ new Map(), statsJson);
      _this.modulesGraph = await import_build2.ModuleGraph.getModuleGraphByStats(
        stats.compilation,
        statsJson,
        process.cwd(),
        _this.chunkGraph,
        _this.options.features,
        context
      );
      (0, import_logger.debug)(import_build.Process.getMemoryUsageMessage, "[After Generate ModuleGraph]");
      if (_this.options.features.treeShaking) {
        _this.modulesGraph = import_build2.ModuleGraph.appendTreeShaking(
          _this.modulesGraph,
          stats.compilation
        ) || _this.modulesGraph;
        _this.sdk.addClientRoutes([
          import_types2.Manifest.RsdoctorManifestClientRoutes.TreeShaking
        ]);
        (0, import_logger.debug)(
          import_build.Process.getMemoryUsageMessage,
          "[After AppendTreeShaking to ModuleGraph]"
        );
      }
      const shouldParseBundle = _this.options.supports.parseBundle !== false;
      await getModulesInfosByStats(
        compiler,
        statsJson,
        _this.modulesGraph,
        shouldParseBundle
      );
      (0, import_logger.debug)(import_build.Process.getMemoryUsageMessage, "[After Transform ModuleGraph]");
      _this.modulesGraph && await _this.sdk.reportModuleGraph(_this.modulesGraph);
      await _this.sdk.reportChunkGraph(_this.chunkGraph);
      const reportFilePath = await import_build2.Chunks.generateTileGraph(
        statsJson,
        {
          reportFilename: import_path.default.join(
            import_types2.Constants.RsdoctorOutputFolder,
            import_build2.Chunks.TileGraphReportName
          ),
          reportTitle: "bundle-analyzer"
        },
        compiler.outputPath
      );
      reportFilePath && await _this.sdk.reportTileHtml(
        import_fs_extra.default.readFileSync(reportFilePath, "utf-8")
      );
    }
  );
};
async function getModulesInfosByStats(compiler, stats, moduleGraph, parseBundle) {
  if (!moduleGraph) {
    return;
  }
  try {
    const parsedModulesData = await import_build2.Chunks.getAssetsModulesData(
      stats,
      compiler.outputPath,
      parseBundle
    ) || {};
    import_common.Chunks.transformAssetsModulesData(parsedModulesData, moduleGraph);
  } catch (e) {
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ensureModulesChunksGraphFn
});
