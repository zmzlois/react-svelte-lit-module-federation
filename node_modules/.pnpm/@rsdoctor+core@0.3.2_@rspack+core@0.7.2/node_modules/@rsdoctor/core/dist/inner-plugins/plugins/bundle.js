"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var bundle_exports = {};
__export(bundle_exports, {
  InternalBundlePlugin: () => InternalBundlePlugin
});
module.exports = __toCommonJS(bundle_exports);
var import_types = require("@rsdoctor/types");
var import_base = require("./base");
var import_common = require("../../build-utils/common");
class InternalBundlePlugin extends import_base.InternalBasePlugin {
  constructor() {
    super(...arguments);
    this.name = "bundle";
    this.map = /* @__PURE__ */ new Map();
    this.thisCompilation = (compilation) => {
      if (compilation.hooks.processAssets && "afterOptimizeAssets" in compilation.hooks) {
        compilation.hooks.afterOptimizeAssets.tap(
          this.tapPostOptions,
          (assets) => {
            Object.keys(assets).forEach((file) => {
              const v = this.ensureAssetContent(file);
              v.content = assets[file].source().toString();
            });
          }
        );
      } else if (compilation.hooks.processAssets && "afterProcessAssets" in compilation.hooks) {
        compilation.hooks.afterProcessAssets.tap(
          this.tapPostOptions,
          () => {
            Object.keys(compilation.assets).forEach((file) => {
              const v = this.ensureAssetContent(file);
              v.content = compilation.assets[file].source().toString();
            });
          }
        );
      } else if ("afterOptimizeChunkAssets" in compilation.hooks) {
        compilation.hooks.afterOptimizeChunkAssets.tap(
          this.tapPostOptions,
          (chunks) => {
            [...chunks].reduce((t, chunk) => t.concat([...chunk.files]), []).forEach((file) => {
              const v = this.ensureAssetContent(file);
              v.content = compilation.assets[file].source().toString();
            });
          }
        );
      }
    };
    this.done = async () => {
      if (this.scheduler.chunkGraph) {
        import_common.Chunks.assetsContents(this.map, this.scheduler.chunkGraph);
      }
      this.sdk.addClientRoutes([
        import_types.Manifest.RsdoctorManifestClientRoutes.ModuleGraph,
        import_types.Manifest.RsdoctorManifestClientRoutes.BundleSize
      ]);
    };
  }
  apply(compiler) {
    this.scheduler.ensureModulesChunksGraphApplied(compiler);
    compiler.hooks.compilation.tap(this.tapPostOptions, this.thisCompilation);
    compiler.hooks.done.tapPromise(this.tapPreOptions, this.done.bind(this));
  }
  ensureAssetContent(name) {
    const asset = this.map.get(name);
    if (asset)
      return asset;
    const v = { content: "" };
    this.map.set(name, v);
    return v;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  InternalBundlePlugin
});
