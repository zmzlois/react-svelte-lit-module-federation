"use strict";
var import_build = require("../../build-utils/build");
var import_utils = require("../utils");
const loaderModule = function(...args) {
  if ((0, import_utils.shouldSkipLoader)(this)) {
    this.callback(null, ...args);
    return;
  }
  this.cacheable(false);
  const mod = (0, import_utils.getOriginLoaderModule)(this);
  if (mod.default) {
    if (mod.raw === false && Buffer.isBuffer(args[0])) {
      args[0] = args[0].toString();
    }
    let start;
    let startHRTime;
    const trap = import_build.Utils.createLoaderContextTrap.call(
      this,
      (err, res, sourceMap) => {
        (0, import_utils.reportLoader)(
          this,
          start,
          startHRTime,
          false,
          false,
          args[0].toString(),
          err,
          res,
          sourceMap
        );
      }
    );
    start = Date.now();
    startHRTime = process.hrtime();
    try {
      const result = mod.default.apply(trap, args);
      if (result) {
        if (!(result instanceof Promise)) {
          (0, import_utils.reportLoader)(
            this,
            start,
            startHRTime,
            false,
            true,
            args[0].toString(),
            null,
            result
          );
        }
      }
      return result;
    } catch (error) {
      (0, import_utils.reportLoader)(
        this,
        start,
        startHRTime,
        false,
        true,
        args[0].toString(),
        error,
        null
      );
      throw error;
    }
  }
  this.callback(null, ...args);
};
loaderModule.pitch = function() {
  if ((0, import_utils.shouldSkipLoader)(this)) {
    return;
  }
  this.cacheable(false);
  const mod = (0, import_utils.getOriginLoaderModule)(this);
  if (mod.pitch && typeof mod.pitch === "function") {
    let start;
    let startHRTime;
    const trap = import_build.Utils.createLoaderContextTrap.call(this, (err, res) => {
      (0, import_utils.reportLoader)(
        this,
        start,
        startHRTime,
        true,
        false,
        err ? "Loader Pitch Async Error" : "",
        err,
        res
      );
    });
    start = Date.now();
    startHRTime = process.hrtime();
    try {
      const res = mod.pitch.apply(trap, arguments);
      if (res) {
        if (!(res instanceof Promise)) {
          (0, import_utils.reportLoader)(this, start, startHRTime, true, true, "", null, res);
        }
      }
      return res;
    } catch (error) {
      (0, import_utils.reportLoader)(
        this,
        start,
        startHRTime,
        true,
        true,
        "Loader Pitch Sync Error",
        error,
        null
      );
      throw error;
    }
  }
};
loaderModule.raw = true;
module.exports = loaderModule;
