"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var bundleTagPlugin_exports = {};
__export(bundleTagPlugin_exports, {
  InternalBundleTagPlugin: () => InternalBundleTagPlugin
});
module.exports = __toCommonJS(bundleTagPlugin_exports);
var import_path = require("path");
var import_webpack_sources = require("webpack-sources");
var import_base = require("./base");
var import_logger = require("@rsdoctor/utils/logger");
class InternalBundleTagPlugin extends import_base.InternalBasePlugin {
  constructor() {
    super(...arguments);
    this.name = "bundleTag";
  }
  apply(compiler) {
    const supportBannerPlugin = !!this.options.supports?.banner;
    compiler.hooks.compilation.tap("RsdoctorTagBannerPlugin", (compilation) => {
      compilation.hooks.processAssets.tapPromise(
        {
          name: "RsdoctorTagBannerPlugin",
          stage: -2e3
        },
        async () => {
          if (!compilation.options.plugins.map((p) => p && p.constructor.name).includes("BannerPlugin") && !supportBannerPlugin) {
            return;
          }
          import_logger.logger.info(
            import_logger.chalk.bgMagenta(
              "Rsdoctor BannerTagPlugin has open. Do not use Rsdoctor on production version."
            )
          );
          const chunks = compilation.chunks;
          for (let chunk of chunks) {
            for (const file of chunk.files) {
              if (!file || (0, import_path.extname)(file) !== ".js") {
                continue;
              }
              compilation.updateAsset(
                file,
                // @ts-ignore
                (old) => {
                  const concatSource = new import_webpack_sources.ConcatSource();
                  let header = "\n console.log('RSDOCTOR_START::');\n";
                  let footer = "\n console.log('RSDOCTOR_END::');\n";
                  concatSource.add(header);
                  concatSource.add(old);
                  concatSource.add(footer);
                  return concatSource;
                },
                () => {
                }
              );
            }
          }
        }
      );
    });
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  InternalBundleTagPlugin
});
