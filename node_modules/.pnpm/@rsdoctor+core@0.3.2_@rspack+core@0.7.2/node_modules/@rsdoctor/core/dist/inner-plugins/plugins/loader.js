"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var loader_exports = {};
__export(loader_exports, {
  InternalLoaderPlugin: () => InternalLoaderPlugin
});
module.exports = __toCommonJS(loader_exports);
var import_types = require("@rsdoctor/types");
var import_common = require("@rsdoctor/utils/common");
var import_lodash = require("lodash");
var import_utils = require("../utils");
var import_base = require("./base");
class InternalLoaderPlugin extends import_base.InternalBasePlugin {
  constructor() {
    super(...arguments);
    this.name = "loader";
    this.internalLoaderPath = require.resolve("../loaders/proxy");
    this.afterPlugins = (compiler) => {
      if (compiler.isChild())
        return;
      compiler.options.module.rules = this.getInterceptRules(
        compiler,
        compiler.options.module.rules
      );
      this.sdk.addClientRoutes([
        import_types.Manifest.RsdoctorManifestClientRoutes.WebpackLoaders
      ]);
    };
  }
  apply(compiler) {
    compiler.hooks.afterPlugins.tap(this.tapPostOptions, this.afterPlugins);
    compiler.hooks.compilation.tap(
      this.tapPreOptions,
      this.compilation.bind(this, compiler)
    );
  }
  compilation(compiler, compilation) {
    if (compiler.isChild())
      return;
    const wrapper = (callback) => (loaderContext, module2) => {
      const proxyLoaders = module2.loaders || loaderContext?.loaders || [];
      const originLoaders = proxyLoaders.map((loader) => {
        const opts = loader.options || {};
        if (opts[import_common.Loader.LoaderInternalPropertyName]) {
          return {
            ...loader,
            loader: opts[import_common.Loader.LoaderInternalPropertyName].loader,
            options: (0, import_lodash.omit)(opts, import_common.Loader.LoaderInternalPropertyName)
          };
        }
        return loader;
      });
      const newLoaders = (0, import_lodash.cloneDeep)(originLoaders);
      if (typeof compiler.options.cache === "object" && "version" in compiler.options.cache && typeof compiler.options.cache.version === "string" && compiler.options.cache.version.indexOf("next/dist/build") > -1) {
        callback(loaderContext, module2);
      } else {
        const proxyModule = new Proxy(module2, {
          get(target, p, receiver) {
            if (p === "loaders")
              return newLoaders;
            return Reflect.get(target, p, receiver);
          },
          set(target, p, newValue, receiver) {
            const _newValue = (0, import_lodash.cloneDeep)(newValue);
            if (p === "loaders") {
              if (Array.isArray(_newValue)) {
                newLoaders.length = 0;
                _newValue.forEach((e) => {
                  newLoaders.push(e);
                });
              }
            }
            return Reflect.set(target, p, _newValue, receiver);
          },
          deleteProperty(target, p) {
            return Reflect.deleteProperty(target, p);
          }
        });
        callback(loaderContext, proxyModule);
      }
      if (!(0, import_lodash.isEqual)(originLoaders, newLoaders)) {
        const rules = this.getInterceptRules(
          compiler,
          newLoaders.map((e) => {
            return {
              loader: e.loader,
              options: e.options
            };
          })
        );
        module2.loaders = rules.map((e, i) => {
          return {
            ...newLoaders[i],
            loader: e.loader,
            options: e.options
          };
        });
      }
    };
    const interceptor = {
      register(tap) {
        const originFn = tap.fn;
        if (typeof originFn === "function") {
          tap.fn = wrapper(originFn);
        }
        return tap;
      }
    };
    if (compiler.webpack?.NormalModule?.getCompilationHooks) {
      compiler.webpack.NormalModule.getCompilationHooks(
        compilation
      ).loader.intercept(interceptor);
    } else if ("normalModuleLoader" in compilation.hooks) {
      "normalModuleLoader" in compilation.hooks && compilation.hooks.normalModuleLoader.intercept(interceptor);
    }
  }
  getInterceptRules(compiler, rules) {
    return (0, import_utils.interceptLoader)(
      rules,
      this.internalLoaderPath,
      {
        cwd: compiler.context || process.cwd(),
        host: this.sdk.server.origin,
        skipLoaders: this.options.loaderInterceptorOptions.skipLoaders
        // not implement
      },
      this.sdk.root,
      "resolveLoader" in compiler.options ? compiler.options.resolveLoader : {}
    );
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  InternalLoaderPlugin
});
