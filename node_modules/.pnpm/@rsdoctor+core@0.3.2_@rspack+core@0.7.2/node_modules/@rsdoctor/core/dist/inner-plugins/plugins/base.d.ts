import type { RsdoctorWebpackSDK } from '@rsdoctor/sdk';
import type { Linter, Plugin } from '@rsdoctor/types';
import type { InternalPlugin, RsdoctorPluginInstance } from '../../types';
export declare abstract class InternalBasePlugin<T extends Plugin.BaseCompiler> implements InternalPlugin<T, Linter.ExtendRuleData[]> {
    readonly scheduler: RsdoctorPluginInstance<T, Linter.ExtendRuleData[]>;
    abstract name: string;
    constructor(scheduler: RsdoctorPluginInstance<T, Linter.ExtendRuleData[]>);
    abstract apply(compiler: T): void;
    get options(): import("@/types").RsdoctorPluginOptionsNormalized<Linter.ExtendRuleData<any, string>[]>;
    get sdk(): RsdoctorWebpackSDK;
    get tapPostOptions(): import("tapable").Tap;
    get tapPreOptions(): import("tapable").Tap;
}
//# sourceMappingURL=base.d.ts.map