"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var plugins_exports = {};
__export(plugins_exports, {
  InternalPluginsPlugin: () => InternalPluginsPlugin
});
module.exports = __toCommonJS(plugins_exports);
var import_types = require("@rsdoctor/types");
var import_build = require("../../build-utils/build");
var import_utils = require("../utils");
var import_base = require("./base");
class InternalPluginsPlugin extends import_base.InternalBasePlugin {
  constructor() {
    super(...arguments);
    this.name = "plugins";
    this.afterPlugins = (compiler) => {
      if (compiler.isChild())
        return;
      import_build.Utils.interceptCompilerHooks(
        compiler,
        (name, hook) => (0, import_utils.interceptPluginHook)(this.sdk, name, hook)
      );
      this.sdk.addClientRoutes([
        import_types.Manifest.RsdoctorManifestClientRoutes.WebpackPlugins
      ]);
    };
    this.compilation = (compilation) => {
      if (compilation.compiler.isChild())
        return;
      import_build.Utils.interceptCompilationHooks(
        compilation,
        (name, hook) => (0, import_utils.interceptPluginHook)(this.sdk, name, hook)
      );
    };
  }
  apply(compiler) {
    compiler.hooks.afterPlugins.tap(this.tapPostOptions, this.afterPlugins);
    compiler.hooks.compilation.tap(this.tapPostOptions, this.compilation);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  InternalPluginsPlugin
});
