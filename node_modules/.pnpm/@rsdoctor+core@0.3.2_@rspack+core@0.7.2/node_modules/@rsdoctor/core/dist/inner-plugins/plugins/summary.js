"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var summary_exports = {};
__export(summary_exports, {
  InternalSummaryPlugin: () => InternalSummaryPlugin
});
module.exports = __toCommonJS(summary_exports);
var import_common = require("@rsdoctor/utils/common");
var import_lodash = require("lodash");
var import_base = require("./base");
class InternalSummaryPlugin extends import_base.InternalBasePlugin {
  constructor() {
    super(...arguments);
    this.name = "summary";
    this.times = /* @__PURE__ */ new Map();
    this.preTimes = /* @__PURE__ */ new Map();
    this.postTimes = /* @__PURE__ */ new Map();
    this.beforeCompile = async () => {
      if (!this.times.has(import_common.Summary.SummaryCostsDataName.Bootstrap)) {
        const costs = Math.floor(process.uptime() * 1e3);
        const startAt = Date.now() - costs;
        this.report(import_common.Summary.SummaryCostsDataName.Bootstrap, startAt);
        this.mark(import_common.Summary.SummaryCostsDataName.Bootstrap, "post");
      }
    };
    this.afterCompile = async (compilation) => {
      if (!this.times.has(import_common.Summary.SummaryCostsDataName.Compile) && !compilation.compiler.isChild()) {
        const start = this.postTimes.get(import_common.Summary.SummaryCostsDataName.Bootstrap);
        this.report(import_common.Summary.SummaryCostsDataName.Compile, start);
        this.mark(import_common.Summary.SummaryCostsDataName.Compile, "post");
      }
    };
    this.done = async (compiler) => {
      const start = this.postTimes.get(import_common.Summary.SummaryCostsDataName.Compile);
      this.report(import_common.Summary.SummaryCostsDataName.Done, start);
      if (compiler.options.optimization.minimize !== false) {
        const pluginData = this.sdk.getStoreData().plugin;
        const minifyHookData = [
          ...pluginData.optimizeChunkAssets || [],
          // webpack4
          ...pluginData.processAssets || []
          // webpack5
        ];
        minifyHookData.length && this.sdk.reportSummaryData({
          costs: [
            {
              name: import_common.Summary.SummaryCostsDataName.Minify,
              startAt: (0, import_lodash.minBy)(minifyHookData, (e) => e.startAt).startAt,
              costs: (0, import_lodash.sumBy)(minifyHookData, (e) => e.costs)
            }
          ]
        });
      }
    };
  }
  apply(compiler) {
    compiler.hooks.beforeCompile.tapPromise(
      this.tapPostOptions,
      this.beforeCompile
    );
    compiler.hooks.afterCompile.tapPromise(
      this.tapPreOptions,
      this.afterCompile
    );
    compiler.hooks.done.tapPromise(
      this.tapPostOptions,
      this.done.bind(this, compiler)
    );
  }
  mark(key, type) {
    const now = Date.now();
    switch (type) {
      case "pre":
        this.preTimes.set(key, now);
        break;
      case "post":
        this.postTimes.set(key, now);
        break;
      default:
        break;
    }
  }
  report(name, start) {
    this.times.set(name, start);
    this.sdk.reportSummaryData({
      costs: [
        {
          name,
          startAt: start,
          costs: Date.now() - start
        }
      ]
    });
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  InternalSummaryPlugin
});
