"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var chunkTransform_exports = {};
__export(chunkTransform_exports, {
  chunkTransform: () => chunkTransform
});
module.exports = __toCommonJS(chunkTransform_exports);
var import_graph = require("@rsdoctor/graph");
var import_lodash = require("lodash");
const FILTER_ASSETS_TYPE = "assets by status";
function chunkTransform(assetMap, bundleStats) {
  const chunkGraph = new import_graph.ChunkGraph();
  (0, import_lodash.forEach)(bundleStats.chunks, (_chunk) => {
    const parsedSize = 0;
    const chunk = new import_graph.Chunk(
      String(_chunk.id),
      _chunk.names?.join("") || _chunk.files?.join("| ") || "",
      _chunk.size,
      _chunk.initial,
      _chunk.entry
    );
    chunk.setParsedSize(parsedSize);
    chunkGraph.addChunk(chunk);
  });
  (0, import_lodash.forEach)(bundleStats.assets, (_asset) => {
    if (_asset.type === FILTER_ASSETS_TYPE) {
      return;
    }
    const chunks = _asset.chunks?.map((ck) => {
      const chunk = chunkGraph.getChunkById(String(ck));
      return chunk;
    }).filter((chunk) => !!chunk) || [];
    const { content = "" } = assetMap.get(_asset.name) || {};
    const asset = new import_graph.Asset(_asset.name, _asset.size, chunks, content);
    chunks.forEach((chunk) => chunk?.addAsset(asset));
    chunkGraph.addAsset(asset);
  });
  (0, import_lodash.forEach)(bundleStats.entrypoints, (_entrypoint, key) => {
    const entrypoint = new import_graph.EntryPoint(_entrypoint.name || key);
    (0, import_lodash.forEach)(_entrypoint.chunks, (chunkId) => {
      const ck = chunkGraph.getChunkById(`${chunkId}`);
      if (ck)
        entrypoint.addChunk(ck);
    });
    (0, import_lodash.forEach)(_entrypoint.assets, (_asset) => {
      const asset = chunkGraph.getAssetByPath(_asset.name);
      if (asset)
        entrypoint.addAsset(asset);
    });
    chunkGraph.addEntryPoint(entrypoint);
  });
  return chunkGraph;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  chunkTransform
});
