"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var utils_exports = {};
__export(utils_exports, {
  getImportKind: () => getImportKind,
  isImportDependency: () => isImportDependency,
  isStyleExt: () => isStyleExt,
  removeNoImportStyle: () => removeNoImportStyle
});
module.exports = __toCommonJS(utils_exports);
var import_types = require("@rsdoctor/types");
function isImportDependency({ type }) {
  return type === "harmony side effect evaluation" || type === "cjs require" || type === "cjs full require" || type === "cjs export require" || type === "provided" || type === "esm import";
}
function getImportKind(dep) {
  const { type } = dep;
  if (!type) {
    return import_types.SDK.DependencyKind.Unknown;
  }
  if (type.includes("harmony")) {
    return import_types.SDK.DependencyKind.ImportStatement;
  }
  if (type.includes("cjs")) {
    return import_types.SDK.DependencyKind.RequireCall;
  }
  if (type.includes("import()")) {
    return import_types.SDK.DependencyKind.DynamicImport;
  }
  if (type.includes("amd")) {
    return import_types.SDK.DependencyKind.AMDRequire;
  }
  return import_types.SDK.DependencyKind.Unknown;
}
function removeNoImportStyle(graph) {
  graph.getModules().filter((module2) => isStyleExt(module2.path)).filter((item) => item.getImported().length === 0).forEach((item) => graph.removeModule(item));
}
function isStyleExt(path) {
  return /\.(c|le|sa|sc)ss(\?.*)?$/.test(path);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getImportKind,
  isImportDependency,
  isStyleExt,
  removeNoImportStyle
});
