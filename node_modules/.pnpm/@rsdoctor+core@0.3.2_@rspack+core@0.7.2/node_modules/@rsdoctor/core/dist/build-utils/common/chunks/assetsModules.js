"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var assetsModules_exports = {};
__export(assetsModules_exports, {
  getAssetsModulesData: () => getAssetsModulesData,
  transformAssetsModulesData: () => transformAssetsModulesData
});
module.exports = __toCommonJS(assetsModules_exports);
var import_lodash = require("lodash");
var import_path = __toESM(require("path"));
var import_logger = require("@rsdoctor/utils/logger");
var import_module_graph = require("../module-graph");
async function getAssetsModulesData(bundleStats, bundleDir, opts) {
  const { parseBundle = () => ({}) } = opts || {};
  if ((0, import_lodash.isEmpty)(bundleStats.assets) && !(0, import_lodash.isEmpty)(bundleStats.children)) {
    const { children } = bundleStats;
    const _bundleStats = children?.[0];
    if (!children) {
      return {};
    }
    for (let i = 1; i < children.length; i++) {
      children[i]?.assets?.forEach((asset) => {
        _bundleStats?.assets?.push(asset);
      });
    }
  } else if (!(0, import_lodash.isEmpty)(bundleStats.children)) {
    bundleStats?.children?.forEach((child) => {
      child?.assets?.forEach((asset) => {
        bundleStats?.assets?.push(asset);
      });
    });
  }
  let bundlesSources = null;
  let parsedModules = null;
  if (bundleDir && bundleStats?.assets) {
    bundlesSources = {};
    parsedModules = {};
    for (const statAsset of bundleStats.assets) {
      const assetFile = import_path.default.join(bundleDir, statAsset.name);
      let bundleInfo;
      const collectedModules = [];
      (0, import_module_graph.getModulesFromArray)(bundleStats.modules ?? [], collectedModules);
      const childrenModules = bundleStats.children?.flatMap((c) => c.modules || []) || [];
      collectedModules.push(...childrenModules);
      try {
        bundleInfo = await parseBundle(assetFile, collectedModules);
      } catch (err) {
        const { code = "", message } = err;
        const msg = code === "ENOENT" ? "no such file" : message;
        process.env.DEVTOOLS_NODE_DEV === "1" && import_logger.logger.warn(`Error parsing bundle asset "${assetFile}": ${msg}`);
        continue;
      }
      bundlesSources[statAsset.name] = (0, import_lodash.pick)(bundleInfo, "src", "runtimeSrc");
      Object.assign(parsedModules, bundleInfo?.modules || {});
    }
    if ((0, import_lodash.isEmpty)(bundlesSources)) {
      bundlesSources = null;
      parsedModules = null;
      process.env.DEVTOOLS_DEV && import_logger.logger.warn(
        "\nNo bundles were parsed. Analyzer will show only original module sizes from stats file.\n"
      );
    }
  }
  return parsedModules;
}
function transformAssetsModulesData(parsedModulesData, moduleGraph) {
  if (!moduleGraph)
    return;
  Object.entries(parsedModulesData).forEach(([moduleId, parsedData]) => {
    const module2 = moduleGraph.getModuleByWebpackId(moduleId ?? "");
    module2?.setSize({
      parsedSize: parsedData?.size
    });
    module2?.setSource({ parsedSource: parsedData?.content || "" });
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getAssetsModulesData,
  transformAssetsModulesData
});
