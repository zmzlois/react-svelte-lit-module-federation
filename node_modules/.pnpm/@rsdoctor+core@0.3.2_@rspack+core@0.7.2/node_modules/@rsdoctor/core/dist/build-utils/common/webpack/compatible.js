"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var compatible_exports = {};
__export(compatible_exports, {
  getAllModules: () => getAllModules,
  getDependencyPosition: () => getDependencyPosition,
  getEntryModule: () => getEntryModule,
  getExportDependency: () => getExportDependency,
  getExportStatement: () => getExportStatement,
  getLastExportInfo: () => getLastExportInfo,
  getModuleExportsType: () => getModuleExportsType,
  getModuleSource: () => getModuleSource,
  getResolveModule: () => getResolveModule,
  getResolveRequest: () => getResolveRequest,
  getSdkDependencyByWebpackDependency: () => getSdkDependencyByWebpackDependency,
  getWebpackDependencyRequest: () => getWebpackDependencyRequest,
  getWebpackModuleId: () => getWebpackModuleId,
  getWebpackModulePath: () => getWebpackModulePath,
  isExternalModule: () => isExternalModule,
  isNormalModule: () => isNormalModule
});
module.exports = __toCommonJS(compatible_exports);
var import_lodash = require("lodash");
var import_graph = require("@rsdoctor/graph");
function isNormalModule(mod) {
  return "request" in mod && "rawRequest" in mod && "resource" in mod;
}
function getWebpackModuleId(mod) {
  return mod.identifier();
}
function getWebpackModulePath(mod) {
  return mod.resource ?? mod.nameForCondition?.() ?? getWebpackModuleId(mod);
}
function getWebpackDependencyRequest(dep, module2) {
  return dep.request ?? dep.userRequest ?? module2?.rawRequest;
}
function getResolveRequest(dep, graph) {
  return getWebpackModulePath(graph.getResolvedModule(dep));
}
function isExternalModule(mod) {
  return Boolean(mod.externalType);
}
function getModuleSource(mod) {
  return isExternalModule(mod) ? "" : mod.originalSource?.()?.source().toString() ?? "";
}
function getResolveModule(dep, graph) {
  if (graph) {
    return graph.getResolvedModule(dep);
  }
  return dep.module ?? void 0;
}
function getEntryModule(entryMap) {
  return Array.from(entryMap.values()).map((entry) => entry.getRuntimeChunk()).map((chunk) => chunk ? chunk.entryModule : null).filter(Boolean).map((mod) => isNormalModule(mod) ? mod : mod.rootModule);
}
function getModuleExportsType(module2, moduleGraph, strict = false) {
  if (moduleGraph) {
    return module2.getExportsType(moduleGraph, strict);
  }
  const exportsType = module2.buildMeta?.exportsType;
  if (!exportsType && !strict) {
    return "dynamic";
  }
  if (exportsType === "named") {
    return "namespace";
  }
  return strict ? "default-with-named" : "dynamic";
}
function getDependencyPosition(dep, module2, getSource = true) {
  const { loc: depLoc } = dep;
  if (!("start" in depLoc)) {
    return;
  }
  const transformed = {
    start: {
      line: depLoc.start.line,
      column: depLoc.start.column
    },
    end: depLoc.end ? {
      line: depLoc.end.line,
      column: depLoc.end.column
    } : void 0
  };
  const statement = new import_graph.Statement(module2, {
    source: getSource ? module2.getSourceRange(transformed) : void 0,
    transformed
  });
  return statement;
}
function getExportDependency(info, module2) {
  let dep = module2.dependencies.find((dep2) => {
    return dep2.name === info.name && (dep2.type === "harmony export imported specifier" || dep2.type === "harmony export specifier");
  });
  if (!dep && info._target && info._target.size > 0) {
    dep = info._getMaxTarget().values().next().value.connection.dependency;
  }
  return dep;
}
function getSdkDependencyByWebpackDependency(dep, module2, graph) {
  const modulePath = getWebpackModulePath(module2);
  const request = getWebpackDependencyRequest(dep);
  return graph.getDependencies().find(
    (item) => item.module.path === modulePath && item.request === request
  );
}
function getExportStatement(info, normalModule, graph) {
  const webpackDependency = getExportDependency(info, normalModule);
  if (!webpackDependency) {
    return;
  }
  const modulePath = getWebpackModulePath(normalModule);
  const request = getWebpackDependencyRequest(webpackDependency);
  const sdkDependency = graph.getDependencies().find(
    (item) => item.module.path === modulePath && item.request === request
  );
  if (sdkDependency && sdkDependency.statements.length === 1) {
    return sdkDependency.statements[0];
  }
  const sdkModule = graph.getModuleByWebpackId(
    getWebpackModuleId(normalModule)
  );
  if (sdkModule) {
    return getDependencyPosition(webpackDependency, sdkModule);
  }
}
function getLastExportInfo(info, webpackGraph) {
  const target = info.findTarget(webpackGraph, () => true);
  if (!target || !target.export) {
    return;
  }
  const exportsInfo = webpackGraph.getExportsInfo(target.module);
  const lastInfo = exportsInfo.getExportInfo(target.export[0]);
  return lastInfo;
}
function getAllModules(compilation) {
  const modules = [];
  for (const mod of compilation.modules) {
    modules.push(...mod.modules ?? []);
    modules.push(mod);
  }
  return (0, import_lodash.unionBy)(
    modules.filter(
      (mod) => !getWebpackModuleId(mod).startsWith("webpack/runtime")
    ),
    (mod) => getWebpackModuleId(mod)
  );
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getAllModules,
  getDependencyPosition,
  getEntryModule,
  getExportDependency,
  getExportStatement,
  getLastExportInfo,
  getModuleExportsType,
  getModuleSource,
  getResolveModule,
  getResolveRequest,
  getSdkDependencyByWebpackDependency,
  getWebpackDependencyRequest,
  getWebpackModuleId,
  getWebpackModulePath,
  isExternalModule,
  isNormalModule
});
