"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var plugin_exports = {};
__export(plugin_exports, {
  interceptCompilationHooks: () => interceptCompilationHooks,
  interceptCompilerHooks: () => interceptCompilerHooks,
  shouldInterceptPluginHook: () => shouldInterceptPluginHook
});
module.exports = __toCommonJS(plugin_exports);
var import_compatible = require("../../common/module-graph/compatible");
function shouldInterceptPluginHook(hook) {
  if (hook._fakeHook) {
    return false;
  }
  if (typeof hook.isUsed === "function") {
    return hook.isUsed();
  }
  if (hook._map && hook._map.size === 0) {
    return false;
  }
  return true;
}
function interceptCompilerHooks(compiler, interceptor) {
  Object.keys(compiler.hooks).forEach((hook) => {
    const v = compiler.hooks[hook];
    if (shouldInterceptPluginHook(v)) {
      interceptor(hook, v, "compiler");
    }
  });
}
function interceptCompilationHooks(compilation, interceptor) {
  Object.keys(compilation.hooks).forEach((hook) => {
    if (hook === "normalModuleLoader" && (0, import_compatible.isWebpack5orRspack)(compilation)) {
      return;
    }
    const v = compilation.hooks[hook];
    if (shouldInterceptPluginHook(v)) {
      interceptor(hook, v, "compilation");
    }
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  interceptCompilationHooks,
  interceptCompilerHooks,
  shouldInterceptPluginHook
});
