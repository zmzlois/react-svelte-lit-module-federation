"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var transform_exports = {};
__export(transform_exports, {
  getModuleGraphByStats: () => getModuleGraphByStats,
  getModulesFromArray: () => getModulesFromArray
});
module.exports = __toCommonJS(transform_exports);
var import_types = require("@rsdoctor/types");
var import_path_browserify = __toESM(require("path-browserify"));
var import_graph = require("@rsdoctor/graph");
var import_utils = require("./utils");
var import_compatible = require("./compatible");
function getCanSkip(data) {
  if (!data.identifier || !(data?.nameForCondition || data.name) || data.identifier.startsWith("webpack/runtime") || data?.name?.startsWith("(webpack)")) {
    return true;
  }
}
function getGetModuleName(root, data) {
  if (data.nameForCondition) {
    return data.nameForCondition.replace("\0", "");
  }
  const name = data.name.replace(/ ?\+ ?\d+ ?modules$/, "");
  return import_path_browserify.default.isAbsolute(name) ? name : import_path_browserify.default.join(root, name);
}
function getModuleFromChildren(module2, collectedModules) {
  if (module2.type === "module" || typeof module2.type === "undefined") {
    collectedModules.push(module2);
  } else if ("children" in module2 && module2.children) {
    getModulesFromArray(
      module2.children,
      collectedModules
    );
  }
}
function getModulesFromArray(modules, collectedModules) {
  modules.forEach((module2) => {
    getModuleFromChildren(module2, collectedModules);
  });
}
function getModulesFromChunks(chunks, collectedModules) {
  chunks?.forEach((chunk) => {
    if (chunk.modules?.length) {
      collectedModules.push(...chunk.modules);
    }
  });
}
function getModuleGraphByStats({ modules, chunks }, root, chunkGraph) {
  import_graph.ModuleGraph.init();
  const moduleGraph = new import_graph.ModuleGraph();
  const allModules = [];
  const collectedModules = [];
  getModulesFromArray(modules ?? [], collectedModules);
  getModulesFromChunks(chunks ?? [], collectedModules);
  for (const data of collectedModules ?? []) {
    if (getCanSkip(data)) {
      continue;
    }
    if (moduleGraph.getModuleByWebpackId(data.identifier)) {
      continue;
    }
    allModules.push(data);
    const isConcatenated = Boolean(data.modules && data.modules.length > 0);
    const concatenatedModule = new import_graph.Module(
      data.identifier,
      getGetModuleName(root, data),
      data.depth === 0,
      isConcatenated ? import_types.SDK.ModuleKind.Concatenation : import_types.SDK.ModuleKind.Normal
    );
    data.chunks?.forEach((_chunkId) => {
      const chunk = chunkGraph.getChunkById(String(_chunkId));
      chunk && concatenatedModule.addChunk(chunk);
    });
    moduleGraph.addModule(concatenatedModule);
    if (data.source) {
      concatenatedModule.setSource({
        transformed: Buffer.isBuffer(data.source) ? data.source.toString() : data.source
      });
    }
    if (typeof data.size === "number") {
      concatenatedModule.setSize({
        sourceSize: data.size,
        transformedSize: data.size
      });
    }
    for (const normal of data.modules ?? []) {
      if (getCanSkip(normal)) {
        continue;
      }
      allModules.push(normal);
      const webpackId = normal.identifier;
      const normalModule = moduleGraph.getModuleByWebpackId(webpackId) ?? new import_graph.Module(
        webpackId,
        getGetModuleName(root, normal),
        normal.depth === 0,
        import_types.SDK.ModuleKind.Normal
      );
      if (normal.chunks?.length) {
        normal.chunks?.forEach((_chunkId) => {
          const chunk = chunkGraph.getChunkById(String(_chunkId));
          chunk && normalModule.addChunk(chunk);
        });
      } else {
        data.chunks?.forEach((_chunkId) => {
          const chunk = chunkGraph.getChunkById(String(_chunkId));
          chunk && normalModule.addChunk(chunk);
        });
      }
      if (normal.source) {
        normalModule.setSource({
          transformed: Buffer.isBuffer(normal.source) ? normal.source.toString() : normal.source
        });
      }
      if (typeof normal.size === "number") {
        normalModule.setSize({
          sourceSize: normal.size,
          transformedSize: normal.size
        });
      }
      moduleGraph.addModule(normalModule);
      concatenatedModule.addNormalModule(normalModule);
    }
  }
  for (const module2 of allModules) {
    const currentModule = moduleGraph.getModuleByWebpackId(
      module2.identifier ?? ""
    );
    if (!currentModule) {
      continue;
    }
    const dependencies = (module2.reasons ?? []).filter(import_utils.isImportDependency).filter((item) => Boolean(item.moduleIdentifier && item.userRequest));
    (module2.reasons ?? []).filter((item) => item.type === "from origin").forEach(
      (dep) => dep?.children?.forEach(
        (_d) => dependencies.push({ ...dep, ..._d, children: void 0 })
      )
    );
    for (const dep of dependencies) {
      const rawRequest = dep.userRequest;
      const requestModule = moduleGraph.getModuleByWebpackId(
        dep.moduleIdentifier
      );
      if (!requestModule) {
        continue;
      }
      if (!requestModule.getDependencyByRequest(rawRequest)) {
        const data = requestModule.addDependency(
          rawRequest,
          currentModule,
          (0, import_utils.getImportKind)(dep)
        );
        if (data) {
          moduleGraph.addDependency(data);
        }
      }
      const dependency = requestModule.getDependencyByRequest(rawRequest);
      if (dependency && dep?.loc) {
        const position = (0, import_compatible.getPositionByStatsLocation)(dep.loc);
        if (position) {
          dependency.addStatement(
            new import_graph.Statement(requestModule, {
              transformed: position
            })
          );
        }
      }
    }
  }
  return moduleGraph;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getModuleGraphByStats,
  getModulesFromArray
});
