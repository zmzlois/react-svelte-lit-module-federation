"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var utils_exports = {};
__export(utils_exports, {
  getDeclarationIdentifier: () => getDeclarationIdentifier,
  getExportIdentifierStatement: () => getExportIdentifierStatement
});
module.exports = __toCommonJS(utils_exports);
var import_lodash = require("lodash");
var import_ruleUtils = require("@rsdoctor/utils/ruleUtils");
function getDefaultExportIdentifier(node, module2, searchId) {
  const { declaration } = node;
  if (import_ruleUtils.parser.asserts.isLiteral(declaration) && declaration.loc) {
    return module2.getStatement(declaration.loc);
  }
  if (import_ruleUtils.parser.asserts.isIdentifier(declaration)) {
    if (searchId) {
      const result = getDeclarationIdentifier(declaration.name, module2);
      if (result) {
        return result;
      }
    } else if (declaration.loc) {
      return module2.getStatement(declaration.loc);
    }
  }
  if (import_ruleUtils.parser.asserts.isClassDeclaration(declaration) || import_ruleUtils.parser.asserts.isFunctionDeclaration(declaration)) {
    if (declaration.id?.loc) {
      return module2.getStatement(declaration.id.loc);
    }
  }
  const startLine = node.declaration.loc?.start.line;
  if (!(0, import_lodash.isNumber)(startLine)) {
    return;
  }
  const { transformed } = module2.getSource();
  const endColumn = transformed.split("\n")[startLine - 1].length - 1;
  return module2.getStatement({
    start: {
      line: startLine,
      column: 0
    },
    end: {
      line: startLine,
      column: endColumn
    }
  });
}
function getExportIdentifierStatement(name, module2) {
  const ast = module2.getProgram();
  if (!ast) {
    return;
  }
  for (const node of ast.body) {
    if (import_ruleUtils.parser.asserts.isExportDefaultDeclaration(node)) {
      const result = getDefaultExportIdentifier(node, module2, false);
      if (result) {
        return result;
      }
    }
    const id = import_ruleUtils.parser.utils.getIdentifierInExport(name, node);
    if (id?.loc) {
      return module2.getStatement(id.loc);
    }
  }
}
function getDeclarationIdentifier(name, module2) {
  const ast = module2.getProgram();
  if (!ast) {
    return;
  }
  for (const node of ast.body) {
    const id = import_ruleUtils.parser.utils.getIdentifierInDeclaration(name, node);
    if (id?.loc) {
      return module2.getStatement(id.loc);
    }
    if (import_ruleUtils.parser.asserts.isExportNamedDeclaration(node) && node.declaration) {
      const id2 = import_ruleUtils.parser.utils.getIdentifierInDeclaration(
        name,
        node.declaration
      );
      if (id2?.loc) {
        return module2.getStatement(id2.loc);
      }
    }
    if (name === "default" && import_ruleUtils.parser.asserts.isExportDefaultDeclaration(node)) {
      const result = getDefaultExportIdentifier(node, module2, true);
      if (result) {
        return result;
      }
    }
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getDeclarationIdentifier,
  getExportIdentifierStatement
});
