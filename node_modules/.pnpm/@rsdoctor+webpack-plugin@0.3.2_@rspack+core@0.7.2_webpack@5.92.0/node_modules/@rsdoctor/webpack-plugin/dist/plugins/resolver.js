"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var resolver_exports = {};
__export(resolver_exports, {
  InternalResolverPlugin: () => InternalResolverPlugin,
  RsdoctorResolverPlugin: () => RsdoctorResolverPlugin
});
module.exports = __toCommonJS(resolver_exports);
var import_plugins = require("@rsdoctor/core/plugins");
var import_types = require("@rsdoctor/types");
var import_common = require("@rsdoctor/utils/common");
var import_path = __toESM(require("path"));
class RsdoctorResolverPlugin {
  constructor(options, sdk) {
    this.options = options;
    this.sdk = sdk;
    this.tapOptions = {
      name: "RsdoctorResolverPlugin"
    };
    this.contextMap = /* @__PURE__ */ new Map();
  }
  getResolverData(context, params) {
    const ctx = this.contextMap.get(context.issuer);
    if (!ctx)
      return;
    const { request, query, result, error, stacks } = params;
    const [start, startHRTime] = ctx;
    const data = {
      isEntry: Boolean(context.issuer),
      issuerPath: context.issuer || "",
      request,
      startAt: start,
      endAt: import_common.Time.getCurrentTimestamp(start, startHRTime),
      pid: process.pid,
      ppid: process.ppid
    };
    if (query) {
      data.query = query;
    }
    if (result) {
      data.result = result;
    }
    if (error) {
      data.error = error;
      data.stacks = stacks || [];
    }
    return data;
  }
  getResolveStackData(request, path2, name = "anonymous") {
    const data = {
      name,
      // issuerPath: request.context.issuer,
      path: path2
    };
    const keys = [
      "request",
      "query",
      "fragment",
      "file",
      "module",
      "directory",
      "internal"
    ];
    keys.forEach((key) => {
      if (request[key]) {
        data[key] = request[key];
      }
    });
    return data;
  }
  getResolveRequest(request, ctx) {
    if (request)
      return request;
    if (ctx?.stack) {
      const [target] = [...ctx.stack].map((e) => e.split(" ").map((e2) => e2.trim())).filter((e) => e.length > 2);
      if (target) {
        return target[target.length - 1];
      }
    }
    return "";
  }
  apply(resolver) {
    resolver.hooks.result.tap(this.tapOptions, (request, rsctx) => {
      const { context } = request;
      const ctx = this.contextMap.get(context.issuer);
      if (ctx) {
        const data = this.getResolverData(context, {
          request: this.getResolveRequest(request.request, rsctx),
          query: request.query,
          result: request.path
        });
        data && this.sdk.reportResolver([data]);
      }
    });
    resolver.hooks.noResolve.tap(this.tapOptions, (request, error) => {
      const { context } = request;
      if (context.issuer) {
        const resolvedPaths = new Set(
          error.details.split("\n").map((e) => e.trim().split(" ")[0]).filter((e) => import_path.default.isAbsolute(e))
        );
        if (resolvedPaths.size) {
          if (this.contextMap.has(context.issuer)) {
            const stacks = [...resolvedPaths].map(
              (e) => this.getResolveStackData(
                request,
                e,
                "noResolve"
              )
            );
            const data = this.getResolverData(context, {
              request: this.getResolveRequest(request.request),
              query: request.query,
              error,
              stacks
            });
            data && this.sdk.reportResolver([data]);
          }
        }
      }
    });
    resolver.hooks.resolveStep.tap(this.tapOptions, (_, request) => {
      const { context } = request;
      if (context.issuer && !this.contextMap.has(context.issuer)) {
        this.contextMap.set(context.issuer, [Date.now(), process.hrtime()]);
      }
    });
  }
}
class InternalResolverPlugin extends import_plugins.InternalBasePlugin {
  constructor() {
    super(...arguments);
    this.name = "resolver";
    this.afterPlugins = (compiler) => {
      if (compiler.isChild())
        return;
      compiler.options.resolve.plugins = (compiler.options.resolve.plugins ?? []).concat(new RsdoctorResolverPlugin({}, this.sdk));
      this.sdk.addClientRoutes([
        import_types.Manifest.RsdoctorManifestClientRoutes.ModuleResolve
      ]);
    };
  }
  apply(compiler) {
    this.scheduler.ensureModulesChunksGraphApplied(compiler);
    compiler.hooks.afterPlugins.tap(this.tapPostOptions, this.afterPlugins);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  InternalResolverPlugin,
  RsdoctorResolverPlugin
});
