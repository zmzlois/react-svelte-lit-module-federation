import { InternalBasePlugin } from '@rsdoctor/core/plugins';
import { RsdoctorWebpackSDK } from '@rsdoctor/sdk';
import { SDK } from '@rsdoctor/types';
import type { Compiler, ResolvePluginInstance, Resolver } from 'webpack';
interface RsdoctorResolverPluginOptions {
}
interface ResolveRequestContext {
    issuer: string;
}
interface ResolveRequestWithContext {
    [key: string]: unknown;
    context: ResolveRequestContext;
}
export declare class RsdoctorResolverPlugin implements ResolvePluginInstance {
    protected options: RsdoctorResolverPluginOptions;
    protected sdk: RsdoctorWebpackSDK;
    protected tapOptions: {
        name: string;
    };
    protected contextMap: Map<string, [number, [number, number]]>;
    constructor(options: RsdoctorResolverPluginOptions, sdk: RsdoctorWebpackSDK);
    protected getResolverData(context: ResolveRequestContext, params: {
        request: string;
        query?: string;
        result?: string;
        error?: Error;
        stacks?: SDK.ResolveStackData[];
    }): SDK.PathResolverData | undefined;
    protected getResolveStackData(request: ResolveRequestWithContext, path: string, name?: string): SDK.ResolveStackData;
    protected getResolveRequest(request: string | undefined, ctx?: Parameters<Resolver['resolve']>[3]): string;
    apply(resolver: Resolver): void;
}
export declare class InternalResolverPlugin extends InternalBasePlugin<Compiler> {
    readonly name = "resolver";
    apply(compiler: Compiler): void;
    afterPlugins: (compiler: Compiler) => void;
}
export {};
//# sourceMappingURL=resolver.d.ts.map