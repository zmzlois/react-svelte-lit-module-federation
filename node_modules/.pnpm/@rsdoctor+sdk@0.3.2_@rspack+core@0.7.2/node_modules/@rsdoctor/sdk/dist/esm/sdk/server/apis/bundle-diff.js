var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import { SDK } from "@rsdoctor/types";
import { BaseAPI } from "./base";
import { Router } from "../router";
class BundleDiffAPI extends BaseAPI {
  async getBundleDiffSummary() {
    const { sdk } = this.ctx;
    const {
      root,
      hash,
      errors,
      chunkGraph,
      moduleGraph,
      packageGraph,
      configs,
      moduleCodeMap,
      // Just usedby bytedance's inner Rsdoctor
      cloudManifestUrl
    } = sdk.getStoreData();
    let outputFilename = "";
    if (typeof configs?.[0]?.config?.output?.filename === "string") {
      outputFilename = configs?.[0]?.config?.output?.filename;
    }
    return {
      root,
      hash,
      errors,
      chunkGraph,
      moduleGraph,
      packageGraph,
      outputFilename,
      moduleCodeMap,
      // Just usedby bytedance's inner Rsdoctor
      cloudManifestUrl
    };
  }
  async bundleDiffManifest() {
    const { sdk } = this.ctx;
    const data = sdk.getStoreData();
    return data;
  }
}
__decorateClass([
  Router.get(SDK.ServerAPI.API.GetBundleDiffSummary)
], BundleDiffAPI.prototype, "getBundleDiffSummary", 1);
__decorateClass([
  Router.get(SDK.ServerAPI.API.BundleDiffManifest)
], BundleDiffAPI.prototype, "bundleDiffManifest", 1);
export {
  BundleDiffAPI
};
