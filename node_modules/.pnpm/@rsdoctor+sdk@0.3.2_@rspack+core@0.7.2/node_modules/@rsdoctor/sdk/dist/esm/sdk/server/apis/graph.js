var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import { SDK } from "@rsdoctor/types";
import { BaseAPI } from "./base";
import { Router } from "../router";
class GraphAPI extends BaseAPI {
  async getAssetsSummary() {
    const { req } = this.ctx;
    const { withFileContent } = req.body;
    return this.dataLoader.loadAPI(SDK.ServerAPI.API.GetAssetsSummary, {
      withFileContent
    });
  }
  async getModuleGraphForAsset() {
    const { req } = this.ctx;
    const { assetPath } = req.body;
    return this.dataLoader.loadAPI(SDK.ServerAPI.API.GetAssetDetails, {
      assetPath
    });
  }
  async getChunksByModuleId() {
    const { req } = this.ctx;
    const { moduleId } = req.body;
    return this.dataLoader.loadAPI(SDK.ServerAPI.API.GetChunksByModuleId, {
      moduleId
    });
  }
  async getModuleDetails() {
    const { req } = this.ctx;
    const { moduleId } = req.body;
    return this.dataLoader.loadAPI(SDK.ServerAPI.API.GetModuleDetails, {
      moduleId
    });
  }
  async getDependencyByResolvedRequest() {
    const { req } = this.ctx;
    const { moduleIds = [] } = req.body;
    return this.dataLoader.loadAPI(SDK.ServerAPI.API.GetModulesByModuleIds, {
      moduleIds
    });
  }
  async getModuleCodeByModuleId() {
    const { req } = this.ctx;
    const { moduleId } = req.body;
    return this.dataLoader.loadAPI(SDK.ServerAPI.API.GetModuleCodeByModuleId, {
      moduleId
    });
  }
  async getModuleCodeByModuleIds() {
    const { req } = this.ctx;
    const { moduleIds } = req.body;
    return this.dataLoader.loadAPI(SDK.ServerAPI.API.GetModuleCodeByModuleIds, {
      moduleIds
    });
  }
  async getEntryModulesSummary() {
    return this.dataLoader.loadAPI(SDK.ServerAPI.API.GetEntryPoints);
  }
}
__decorateClass([
  Router.post(SDK.ServerAPI.API.GetAssetsSummary)
], GraphAPI.prototype, "getAssetsSummary", 1);
__decorateClass([
  Router.post(SDK.ServerAPI.API.GetAssetDetails)
], GraphAPI.prototype, "getModuleGraphForAsset", 1);
__decorateClass([
  Router.post(SDK.ServerAPI.API.GetChunksByModuleId)
], GraphAPI.prototype, "getChunksByModuleId", 1);
__decorateClass([
  Router.post(SDK.ServerAPI.API.GetModuleDetails)
], GraphAPI.prototype, "getModuleDetails", 1);
__decorateClass([
  Router.post(SDK.ServerAPI.API.GetModulesByModuleIds)
], GraphAPI.prototype, "getDependencyByResolvedRequest", 1);
__decorateClass([
  Router.post(SDK.ServerAPI.API.GetModuleCodeByModuleId)
], GraphAPI.prototype, "getModuleCodeByModuleId", 1);
__decorateClass([
  Router.post(SDK.ServerAPI.API.GetModuleCodeByModuleIds)
], GraphAPI.prototype, "getModuleCodeByModuleIds", 1);
__decorateClass([
  Router.post(SDK.ServerAPI.API.GetEntryPoints)
], GraphAPI.prototype, "getEntryModulesSummary", 1);
export {
  GraphAPI
};
