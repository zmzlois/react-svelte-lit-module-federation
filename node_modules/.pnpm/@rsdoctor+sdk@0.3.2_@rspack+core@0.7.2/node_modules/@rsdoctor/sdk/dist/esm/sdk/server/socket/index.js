import { SDK } from "@rsdoctor/types";
import {
  Server as SocketServer
} from "socket.io";
import { isDeepStrictEqual } from "util";
import { SocketAPILoader } from "./api";
class Socket {
  constructor(options) {
    this.options = options;
    this.map = /* @__PURE__ */ new Map();
    this.loader = new SocketAPILoader({ sdk: options.sdk });
  }
  bootstrap() {
    this.io = new SocketServer(this.options.server, {
      cors: {
        origin: "*"
      },
      ...this.options.socketOptions
    });
    this.io.on("connection", (socket) => {
      this.setupSocket(socket);
    });
  }
  setupSocket(socket) {
    Object.values(SDK.ServerAPI.API).forEach((api) => {
      socket.on(api, async (body, callback) => {
        this.saveRequestToMap(api, body);
        callback(await this.getAPIResponse(api, body));
      });
    });
  }
  saveRequestToMap(api, body = null) {
    if (!this.map.has(api)) {
      this.map.set(api, []);
    }
    const list = this.map.get(api);
    if (!list.some((e) => e === body || isDeepStrictEqual(e, body))) {
      list.push(body);
    }
  }
  async getAPIResponse(api, body) {
    const data = await this.loader.loadAPIData(
      api,
      body
    );
    const response = {
      req: {
        api,
        body
      },
      res: data
    };
    return response;
  }
  async broadcast() {
    clearImmediate(this.timer);
    this.timer = setImmediate(async () => {
      const promises = [];
      this.map.forEach((bodies, api) => {
        bodies.forEach((body) => {
          promises.push(
            (async () => {
              const res = await this.getAPIResponse(api, body);
              this.io.emit(api, res);
            })()
          );
        });
      });
      await Promise.all(promises);
    });
  }
  sendAPIData(api, msg) {
    this.io.sockets.emit(api, msg);
  }
  dispose() {
    this.io.disconnectSockets();
    this.io.close();
  }
}
export {
  Socket
};
