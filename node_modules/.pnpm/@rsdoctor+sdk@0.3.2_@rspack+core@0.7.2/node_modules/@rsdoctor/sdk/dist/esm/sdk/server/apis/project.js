var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import { SDK } from "@rsdoctor/types";
import ip from "ip";
import { BaseAPI } from "./base";
import { Router } from "../router";
class ProjectAPI extends BaseAPI {
  async env() {
    const { server } = this.ctx;
    return {
      ip: ip.address(),
      port: server.port
    };
  }
  async manifest() {
    const { sdk } = this.ctx;
    const data = sdk.getManifestData();
    return JSON.stringify(data);
  }
  async getProjectInfo() {
    return this.dataLoader.loadAPI(SDK.ServerAPI.API.GetProjectInfo);
  }
  async getClientRoutes() {
    return this.dataLoader.loadAPI(SDK.ServerAPI.API.GetClientRoutes);
  }
}
__decorateClass([
  Router.get(SDK.ServerAPI.API.Env)
], ProjectAPI.prototype, "env", 1);
__decorateClass([
  Router.get(SDK.ServerAPI.API.Manifest)
], ProjectAPI.prototype, "manifest", 1);
__decorateClass([
  Router.post(SDK.ServerAPI.API.GetProjectInfo)
], ProjectAPI.prototype, "getProjectInfo", 1);
__decorateClass([
  Router.post(SDK.ServerAPI.API.GetClientRoutes)
], ProjectAPI.prototype, "getClientRoutes", 1);
export {
  ProjectAPI
};
