const _Router = class _Router {
  constructor(options) {
    this.options = options;
  }
  static get(pathname) {
    return (target, propertyKey, descriptor) => {
      const routes = _Router.routes.get;
      if (!routes.has(target.constructor)) {
        routes.set(target.constructor, []);
      }
      routes.get(target.constructor).push([propertyKey, pathname]);
      return descriptor;
    };
  }
  static post(pathname) {
    return (target, propertyKey, descriptor) => {
      const routes = _Router.routes.post;
      if (!routes.has(target.constructor)) {
        routes.set(target.constructor, []);
      }
      routes.get(target.constructor).push([propertyKey, pathname]);
      return descriptor;
    };
  }
  async setup() {
    const { apis, sdk, server } = this.options;
    apis.forEach((API) => {
      const obj = new API(sdk, server);
      _Router.routes.get.forEach((v, cons) => {
        v.forEach(([key, pathname]) => {
          if (cons === API) {
            server.get(pathname, this.wrapAPIFunction(obj, key));
          }
        });
      });
      _Router.routes.post.forEach((v, cons) => {
        v.forEach(([key, pathname]) => {
          if (cons === API) {
            server.post(pathname, this.wrapAPIFunction(obj, key));
          }
        });
      });
    });
  }
  wrapAPIFunction(api, key) {
    const { sdk, server } = this.options;
    return async (req, res) => {
      const ctx = {
        req,
        res,
        sdk,
        server
      };
      const trap = new Proxy(api, {
        get(target, key2, receiver) {
          switch (key2) {
            case "ctx":
              return ctx;
            default:
              return Reflect.get(target, key2, receiver);
          }
        },
        set(target, key2, value, receiver) {
          return Reflect.set(target, key2, value, receiver);
        },
        defineProperty(target, p, attrs) {
          return Reflect.defineProperty(target, p, attrs);
        }
      });
      const fn = api[key];
      const result = await fn.call(trap, trap);
      if (typeof result === "string") {
        return Buffer.from(result, "utf-8");
      }
      if (result && typeof result === "object") {
        return Buffer.from(JSON.stringify(result), "utf-8");
      }
      return result;
    };
  }
};
_Router.routes = {
  /**
   * - `key` is the constuctor of object which used to match the API class
   */
  get: /* @__PURE__ */ new Map(),
  post: /* @__PURE__ */ new Map()
};
let Router = _Router;
export {
  Router
};
