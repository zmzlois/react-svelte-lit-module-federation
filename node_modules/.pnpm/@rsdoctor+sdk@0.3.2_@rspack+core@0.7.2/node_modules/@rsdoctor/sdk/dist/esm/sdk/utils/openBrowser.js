import { exec } from "node:child_process";
import { promisify } from "node:util";
import { logger } from "@rsdoctor/utils/logger";
import open from "open";
import { join } from "node:path";
const execAsync = promisify(exec);
const supportedChromiumBrowsers = [
  "Google Chrome Canary",
  "Google Chrome Dev",
  "Google Chrome Beta",
  "Google Chrome",
  "Microsoft Edge",
  "Brave Browser",
  "Vivaldi",
  "Chromium"
];
const getTargetBrowser = async () => {
  let targetBrowser = process.env.BROWSER;
  if (!targetBrowser || !supportedChromiumBrowsers.includes(targetBrowser)) {
    const { stdout: ps } = await execAsync("ps cax");
    targetBrowser = supportedChromiumBrowsers.find((b) => ps.includes(b));
  }
  return targetBrowser;
};
async function openBrowser(url) {
  const shouldTryOpenChromeWithAppleScript = process.platform === "darwin";
  if (shouldTryOpenChromeWithAppleScript) {
    try {
      const targetBrowser = await getTargetBrowser();
      if (targetBrowser) {
        await execAsync(
          `osascript openChrome.applescript "${encodeURI(
            url
          )}" "${targetBrowser}"`,
          {
            cwd: join(__dirname, "../../../../static")
          }
        );
        return true;
      }
      logger.debug("Failed to find the target browser.");
    } catch (err) {
      logger.debug("Failed to open Rsdoctor URL with apple script.");
      logger.debug(err);
    }
  }
  try {
    await open(url);
    return true;
  } catch (err) {
    logger.error("Failed to open Rsdoctor URL.");
    logger.error(err);
    return false;
  }
}
export {
  openBrowser
};
