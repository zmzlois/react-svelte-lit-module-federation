import { SDK, Client } from "@rsdoctor/types";
import { Server } from "@rsdoctor/utils/build";
import { Bundle } from "@rsdoctor/utils/common";
import assert from "assert";
import bodyParser from "body-parser";
import ip from "ip";
import cors from "cors";
import { PassThrough } from "stream";
import { Socket } from "./socket";
import { Router } from "./router";
import * as APIs from "./apis";
import { chalk, logger } from "@rsdoctor/utils/logger";
import { openBrowser } from "../utils/openBrowser";
export * from "./utils";
class RsdoctorServer {
  constructor(sdk, port = Server.defaultPort, innerClientPath = "") {
    this.sdk = sdk;
    this.disposed = true;
    this.get = (route, cb) => {
      const { app } = this;
      app.use(route, this.wrapNextHandleFunction("GET", cb));
      return app;
    };
    this.post = (route, cb) => {
      const { app } = this;
      app.use(route, this.wrapNextHandleFunction("POST", cb));
      return app;
    };
    this.dispose = async () => {
      if (this.disposed)
        return;
      this.disposed = true;
      if (this._server) {
        await this._server.close();
      }
      if (this._socket) {
        this._socket.dispose();
      }
    };
    assert(typeof port === "number");
    this.port = port;
    this._router = new Router({ sdk, server: this, apis: Object.values(APIs) });
    this._innerClientPath = innerClientPath;
  }
  get app() {
    return this._server.app;
  }
  get host() {
    const host = ip.address();
    return host;
  }
  get origin() {
    return `http://${this.host}:${this.port}`;
  }
  get socketUrl() {
    return `ws://localhost:${this.port}`;
  }
  get innerClientPath() {
    return this._innerClientPath;
  }
  async bootstrap() {
    if (!this.disposed) {
      return;
    }
    const port = Server.getPortSync(this.port);
    this.port = port;
    this._server = await Server.createServer(port);
    this._socket = new Socket({
      sdk: this.sdk,
      server: this._server.server,
      port: this.port
    });
    await this._socket.bootstrap();
    this.disposed = false;
    this.app.use(cors());
    this.app.use(bodyParser.json({ limit: "500mb" }));
    await this._router.setup();
    process.once("exit", this.dispose);
    process.once("SIGINT", this.dispose);
    process.once("SIGTERM", this.dispose);
    process.once("unhandledRejection", this.dispose);
    process.once("uncaughtException", this.dispose);
  }
  wrapNextHandleFunction(method, cb) {
    return async (req, res, next) => {
      const m = req.method?.toUpperCase();
      if (m === method) {
        try {
          const body = await cb(req, res, next);
          res.setHeader("Access-Control-Allow-Origin", "*");
          res.setHeader("Access-Control-Allow-Credentials", "true");
          res.statusCode = 200;
          if (Buffer.isBuffer(body)) {
            res.setHeader("Content-Length", body.byteLength);
            const ps = new PassThrough();
            ps.write(body);
            ps.end();
            ps.pipe(res);
          } else if (body && typeof body === "object") {
            res.writeHead(200, {
              "Content-Type": "application/json;utf-8"
            });
            res.write(JSON.stringify(body));
            res.end();
          } else {
            res.writeHead(200).end(body);
          }
        } catch (error) {
          res.statusCode = 500;
          res.end(error.message);
          return next(error);
        }
        return;
      }
      await next();
    };
  }
  proxy(api, method, cb) {
    let idx = this.app.stack.findIndex((e) => e.route === api);
    if (idx === -1) {
      idx = this.app.stack.length - 1;
    }
    this.app.stack.splice(idx, 0, {
      route: api,
      handle: this.wrapNextHandleFunction(method, cb)
    });
  }
  getClientUrl(route = "homepage", ...args) {
    const relativeUrl = SDK.ServerAPI.API.EntryHtml;
    switch (route) {
      case Client.RsdoctorClientRoutes.BundleDiff: {
        const [baseline, current] = args;
        const qs = Bundle.getBundleDiffPageQueryString([baseline, current]);
        return `${relativeUrl}${qs}#${Client.RsdoctorClientRoutes.BundleDiff}`;
      }
      default:
        return relativeUrl;
    }
  }
  async openClientPage(...args) {
    const relativeUrl = this.getClientUrl(
      ...args
    );
    const url = `http://${this.host}:${this.port}${relativeUrl}`;
    const localhostUrl = `http://localhost:${this.port}${relativeUrl}`;
    await openBrowser(localhostUrl);
    logger.info(`Rsdoctor analyze server running on: ${chalk.cyan(url)}`);
    logger.info(
      `Rsdoctor analyze server running on: ${chalk.cyan(localhostUrl)}`
    );
  }
  sendAPIDataToClient(api, msg) {
    this._socket?.sendAPIData(api, msg);
  }
  async broadcast() {
    await this._socket?.broadcast();
  }
}
export {
  RsdoctorServer
};
