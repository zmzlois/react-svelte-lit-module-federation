var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import { SDK } from "@rsdoctor/types";
import { BaseAPI } from "./base";
import { Router } from "../router";
class LoaderAPI extends BaseAPI {
  async reportLoader() {
    const { req, sdk } = this.ctx;
    const { body } = req;
    sdk.reportLoader(body);
    return "ok";
  }
  async reportSourceMap() {
    const {
      req: { body },
      sdk
    } = this.ctx;
    sdk.reportSourceMap(body);
    return "ok";
  }
  async getLoaderNames() {
    return this.dataLoader.loadAPI(SDK.ServerAPI.API.GetLoaderNames);
  }
  async getLoaderChartData() {
    return this.dataLoader.loadAPI(SDK.ServerAPI.API.GetLoaderChartData);
  }
  async getLoaderFileTree() {
    return this.dataLoader.loadAPI(SDK.ServerAPI.API.GetLoaderFileTree);
  }
  async getLoaderFileDetails() {
    const { req } = this.ctx;
    const { path } = req.body;
    return this.dataLoader.loadAPI(SDK.ServerAPI.API.GetLoaderFileDetails, {
      path
    });
  }
  async getLoaderFolderStatistics() {
    const { req } = this.ctx;
    const { folder } = req.body;
    return this.dataLoader.loadAPI(
      SDK.ServerAPI.API.GetLoaderFolderStatistics,
      { folder }
    );
  }
  async getLoaderFileFirstInput() {
    const { req } = this.ctx;
    const { file } = req.body;
    return this.dataLoader.loadAPI(SDK.ServerAPI.API.GetLoaderFileFirstInput, {
      file
    });
  }
  async getLoaderFileInputAndOutput() {
    const { req } = this.ctx;
    const { file, loader, loaderIndex } = req.body;
    return this.dataLoader.loadAPI(
      SDK.ServerAPI.API.GetLoaderFileInputAndOutput,
      { file, loader, loaderIndex }
    );
  }
  async getTileReportHtml() {
    return this.dataLoader.loadAPI(SDK.ServerAPI.API.GetTileReportHtml, {});
  }
}
__decorateClass([
  Router.post(SDK.ServerAPI.API.ReportLoader)
], LoaderAPI.prototype, "reportLoader", 1);
__decorateClass([
  Router.post(SDK.ServerAPI.API.ReportSourceMap)
], LoaderAPI.prototype, "reportSourceMap", 1);
__decorateClass([
  Router.post(SDK.ServerAPI.API.GetLoaderNames)
], LoaderAPI.prototype, "getLoaderNames", 1);
__decorateClass([
  Router.post(SDK.ServerAPI.API.GetLoaderChartData)
], LoaderAPI.prototype, "getLoaderChartData", 1);
__decorateClass([
  Router.post(SDK.ServerAPI.API.GetLoaderFileTree)
], LoaderAPI.prototype, "getLoaderFileTree", 1);
__decorateClass([
  Router.post(SDK.ServerAPI.API.GetLoaderFileDetails)
], LoaderAPI.prototype, "getLoaderFileDetails", 1);
__decorateClass([
  Router.post(SDK.ServerAPI.API.GetLoaderFolderStatistics)
], LoaderAPI.prototype, "getLoaderFolderStatistics", 1);
__decorateClass([
  Router.post(SDK.ServerAPI.API.GetLoaderFileFirstInput)
], LoaderAPI.prototype, "getLoaderFileFirstInput", 1);
__decorateClass([
  Router.post(SDK.ServerAPI.API.GetLoaderFileInputAndOutput)
], LoaderAPI.prototype, "getLoaderFileInputAndOutput", 1);
__decorateClass([
  Router.post(SDK.ServerAPI.API.GetTileReportHtml)
], LoaderAPI.prototype, "getTileReportHtml", 1);
export {
  LoaderAPI
};
