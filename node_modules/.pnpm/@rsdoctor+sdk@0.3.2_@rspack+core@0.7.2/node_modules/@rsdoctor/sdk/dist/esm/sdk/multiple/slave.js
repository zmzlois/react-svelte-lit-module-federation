import path from "path";
import { RsdoctorWebpackSDK } from "../sdk";
import { RsdoctorSlaveServer } from "./server";
let id = 1;
class RsdoctorSlaveSDK extends RsdoctorWebpackSDK {
  constructor({
    name,
    stage,
    controller,
    extraConfig
  }) {
    super({ name, root: controller.root });
    const lastSdk = controller.getLastSdk();
    const port = lastSdk ? lastSdk.server.port + 1 : this.server.port;
    this.id = id++;
    this.stage = typeof stage === "number" ? stage : 1;
    this.extraConfig = extraConfig;
    this.parent = controller;
    this.server = new RsdoctorSlaveServer(this, port);
    this.setName(name);
    this.clearSwitch();
  }
  clearSwitch() {
    this.uploadPieces = new Promise((resolve) => {
      this.finishUploadPieceSwitch = resolve;
    });
  }
  get isMaster() {
    return this.parent.master === this;
  }
  async writePieces() {
    const { name, parent, isMaster, outputDir, finishUploadPieceSwitch } = this;
    this.setOutputDir(
      isMaster ? outputDir : path.join(
        parent.master.outputDir,
        ".slaves",
        name.replace(/\s+/g, "-")
      )
    );
    await super.writePieces(this.getStoreData());
    finishUploadPieceSwitch?.();
  }
  async writeManifest() {
    const { parent, cloudData } = this;
    await Promise.all(this.parent.slaves.map((item) => item.uploadPieces));
    if (cloudData) {
      cloudData.name = this.name;
      cloudData.series = parent.getSeriesData();
    }
    const result = await super.writeManifest();
    this.clearSwitch();
    return result;
  }
  getSeriesData(serverUrl = false) {
    return this.parent.getSeriesData(serverUrl);
  }
  setName(name) {
    this._name = this.parent.hasName(name) ? `${name}-${id}` : name;
  }
  getManifestData() {
    const data = super.getManifestData();
    data.name = this.name;
    data.series = this.getSeriesData(true);
    return data;
  }
}
export {
  RsdoctorSlaveSDK
};
