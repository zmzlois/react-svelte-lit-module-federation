"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var socket_exports = {};
__export(socket_exports, {
  Socket: () => Socket
});
module.exports = __toCommonJS(socket_exports);
var import_types = require("@rsdoctor/types");
var import_socket = require("socket.io");
var import_util = require("util");
var import_api = require("./api");
class Socket {
  constructor(options) {
    this.options = options;
    this.map = /* @__PURE__ */ new Map();
    this.loader = new import_api.SocketAPILoader({ sdk: options.sdk });
  }
  bootstrap() {
    this.io = new import_socket.Server(this.options.server, {
      cors: {
        origin: "*"
      },
      ...this.options.socketOptions
    });
    this.io.on("connection", (socket) => {
      this.setupSocket(socket);
    });
  }
  setupSocket(socket) {
    Object.values(import_types.SDK.ServerAPI.API).forEach((api) => {
      socket.on(api, async (body, callback) => {
        this.saveRequestToMap(api, body);
        callback(await this.getAPIResponse(api, body));
      });
    });
  }
  saveRequestToMap(api, body = null) {
    if (!this.map.has(api)) {
      this.map.set(api, []);
    }
    const list = this.map.get(api);
    if (!list.some((e) => e === body || (0, import_util.isDeepStrictEqual)(e, body))) {
      list.push(body);
    }
  }
  async getAPIResponse(api, body) {
    const data = await this.loader.loadAPIData(
      api,
      body
    );
    const response = {
      req: {
        api,
        body
      },
      res: data
    };
    return response;
  }
  async broadcast() {
    clearImmediate(this.timer);
    this.timer = setImmediate(async () => {
      const promises = [];
      this.map.forEach((bodies, api) => {
        bodies.forEach((body) => {
          promises.push(
            (async () => {
              const res = await this.getAPIResponse(api, body);
              this.io.emit(api, res);
            })()
          );
        });
      });
      await Promise.all(promises);
    });
  }
  sendAPIData(api, msg) {
    this.io.sockets.emit(api, msg);
  }
  dispose() {
    this.io.disconnectSockets();
    this.io.close();
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Socket
});
