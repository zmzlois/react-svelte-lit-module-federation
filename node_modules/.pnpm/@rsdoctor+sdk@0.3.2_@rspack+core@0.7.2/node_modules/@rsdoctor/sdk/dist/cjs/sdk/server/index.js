"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var server_exports = {};
__export(server_exports, {
  RsdoctorServer: () => RsdoctorServer
});
module.exports = __toCommonJS(server_exports);
var import_types = require("@rsdoctor/types");
var import_build = require("@rsdoctor/utils/build");
var import_common = require("@rsdoctor/utils/common");
var import_assert = __toESM(require("assert"));
var import_body_parser = __toESM(require("body-parser"));
var import_ip = __toESM(require("ip"));
var import_cors = __toESM(require("cors"));
var import_stream = require("stream");
var import_socket = require("./socket");
var import_router = require("./router");
var APIs = __toESM(require("./apis"));
var import_logger = require("@rsdoctor/utils/logger");
var import_openBrowser = require("../utils/openBrowser");
__reExport(server_exports, require("./utils"), module.exports);
class RsdoctorServer {
  constructor(sdk, port = import_build.Server.defaultPort, innerClientPath = "") {
    this.sdk = sdk;
    this.disposed = true;
    this.get = (route, cb) => {
      const { app } = this;
      app.use(route, this.wrapNextHandleFunction("GET", cb));
      return app;
    };
    this.post = (route, cb) => {
      const { app } = this;
      app.use(route, this.wrapNextHandleFunction("POST", cb));
      return app;
    };
    this.dispose = async () => {
      if (this.disposed)
        return;
      this.disposed = true;
      if (this._server) {
        await this._server.close();
      }
      if (this._socket) {
        this._socket.dispose();
      }
    };
    (0, import_assert.default)(typeof port === "number");
    this.port = port;
    this._router = new import_router.Router({ sdk, server: this, apis: Object.values(APIs) });
    this._innerClientPath = innerClientPath;
  }
  get app() {
    return this._server.app;
  }
  get host() {
    const host = import_ip.default.address();
    return host;
  }
  get origin() {
    return `http://${this.host}:${this.port}`;
  }
  get socketUrl() {
    return `ws://localhost:${this.port}`;
  }
  get innerClientPath() {
    return this._innerClientPath;
  }
  async bootstrap() {
    if (!this.disposed) {
      return;
    }
    const port = import_build.Server.getPortSync(this.port);
    this.port = port;
    this._server = await import_build.Server.createServer(port);
    this._socket = new import_socket.Socket({
      sdk: this.sdk,
      server: this._server.server,
      port: this.port
    });
    await this._socket.bootstrap();
    this.disposed = false;
    this.app.use((0, import_cors.default)());
    this.app.use(import_body_parser.default.json({ limit: "500mb" }));
    await this._router.setup();
    process.once("exit", this.dispose);
    process.once("SIGINT", this.dispose);
    process.once("SIGTERM", this.dispose);
    process.once("unhandledRejection", this.dispose);
    process.once("uncaughtException", this.dispose);
  }
  wrapNextHandleFunction(method, cb) {
    return async (req, res, next) => {
      const m = req.method?.toUpperCase();
      if (m === method) {
        try {
          const body = await cb(req, res, next);
          res.setHeader("Access-Control-Allow-Origin", "*");
          res.setHeader("Access-Control-Allow-Credentials", "true");
          res.statusCode = 200;
          if (Buffer.isBuffer(body)) {
            res.setHeader("Content-Length", body.byteLength);
            const ps = new import_stream.PassThrough();
            ps.write(body);
            ps.end();
            ps.pipe(res);
          } else if (body && typeof body === "object") {
            res.writeHead(200, {
              "Content-Type": "application/json;utf-8"
            });
            res.write(JSON.stringify(body));
            res.end();
          } else {
            res.writeHead(200).end(body);
          }
        } catch (error) {
          res.statusCode = 500;
          res.end(error.message);
          return next(error);
        }
        return;
      }
      await next();
    };
  }
  proxy(api, method, cb) {
    let idx = this.app.stack.findIndex((e) => e.route === api);
    if (idx === -1) {
      idx = this.app.stack.length - 1;
    }
    this.app.stack.splice(idx, 0, {
      route: api,
      handle: this.wrapNextHandleFunction(method, cb)
    });
  }
  getClientUrl(route = "homepage", ...args) {
    const relativeUrl = import_types.SDK.ServerAPI.API.EntryHtml;
    switch (route) {
      case import_types.Client.RsdoctorClientRoutes.BundleDiff: {
        const [baseline, current] = args;
        const qs = import_common.Bundle.getBundleDiffPageQueryString([baseline, current]);
        return `${relativeUrl}${qs}#${import_types.Client.RsdoctorClientRoutes.BundleDiff}`;
      }
      default:
        return relativeUrl;
    }
  }
  async openClientPage(...args) {
    const relativeUrl = this.getClientUrl(
      ...args
    );
    const url = `http://${this.host}:${this.port}${relativeUrl}`;
    const localhostUrl = `http://localhost:${this.port}${relativeUrl}`;
    await (0, import_openBrowser.openBrowser)(localhostUrl);
    import_logger.logger.info(`Rsdoctor analyze server running on: ${import_logger.chalk.cyan(url)}`);
    import_logger.logger.info(
      `Rsdoctor analyze server running on: ${import_logger.chalk.cyan(localhostUrl)}`
    );
  }
  sendAPIDataToClient(api, msg) {
    this._socket?.sendAPIData(api, msg);
  }
  async broadcast() {
    await this._socket?.broadcast();
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  RsdoctorServer,
  ...require("./utils")
});
