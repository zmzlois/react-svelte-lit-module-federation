"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var openBrowser_exports = {};
__export(openBrowser_exports, {
  openBrowser: () => openBrowser
});
module.exports = __toCommonJS(openBrowser_exports);
var import_node_child_process = require("node:child_process");
var import_node_util = require("node:util");
var import_logger = require("@rsdoctor/utils/logger");
var import_open = __toESM(require("open"));
var import_node_path = require("node:path");
const execAsync = (0, import_node_util.promisify)(import_node_child_process.exec);
const supportedChromiumBrowsers = [
  "Google Chrome Canary",
  "Google Chrome Dev",
  "Google Chrome Beta",
  "Google Chrome",
  "Microsoft Edge",
  "Brave Browser",
  "Vivaldi",
  "Chromium"
];
const getTargetBrowser = async () => {
  let targetBrowser = process.env.BROWSER;
  if (!targetBrowser || !supportedChromiumBrowsers.includes(targetBrowser)) {
    const { stdout: ps } = await execAsync("ps cax");
    targetBrowser = supportedChromiumBrowsers.find((b) => ps.includes(b));
  }
  return targetBrowser;
};
async function openBrowser(url) {
  const shouldTryOpenChromeWithAppleScript = process.platform === "darwin";
  if (shouldTryOpenChromeWithAppleScript) {
    try {
      const targetBrowser = await getTargetBrowser();
      if (targetBrowser) {
        await execAsync(
          `osascript openChrome.applescript "${encodeURI(
            url
          )}" "${targetBrowser}"`,
          {
            cwd: (0, import_node_path.join)(__dirname, "../../../../static")
          }
        );
        return true;
      }
      import_logger.logger.debug("Failed to find the target browser.");
    } catch (err) {
      import_logger.logger.debug("Failed to open Rsdoctor URL with apple script.");
      import_logger.logger.debug(err);
    }
  }
  try {
    await (0, import_open.default)(url);
    return true;
  } catch (err) {
    import_logger.logger.error("Failed to open Rsdoctor URL.");
    import_logger.logger.error(err);
    return false;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  openBrowser
});
