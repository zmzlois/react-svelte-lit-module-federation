"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var controller_exports = {};
__export(controller_exports, {
  RsdoctorSDKController: () => RsdoctorSDKController
});
module.exports = __toCommonJS(controller_exports);
var import_slave = require("./slave");
class RsdoctorSDKController {
  constructor(root = process.cwd()) {
    this.slaves = [];
    this.root = "";
    this.root = root;
  }
  get master() {
    return this.slaves[0];
  }
  getLastSdk() {
    return this.slaves[this.slaves.length - 1];
  }
  hasName(name) {
    return Boolean(this.slaves.find((item) => item.name === name));
  }
  getSeriesData(serverUrl = false) {
    return this.slaves.map((item) => {
      const data = {
        name: item.name,
        path: item.diskManifestPath,
        stage: item.stage
      };
      if (serverUrl) {
        data.origin = item.server.origin;
      }
      return data;
    });
  }
  createSlave({
    name,
    stage,
    extraConfig
  }) {
    const slave = new import_slave.RsdoctorSlaveSDK({
      name,
      stage,
      controller: this,
      extraConfig
    });
    this.slaves.push(slave);
    this.slaves.sort((a, b) => a.stage - b.stage);
    return slave;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  RsdoctorSDKController
});
