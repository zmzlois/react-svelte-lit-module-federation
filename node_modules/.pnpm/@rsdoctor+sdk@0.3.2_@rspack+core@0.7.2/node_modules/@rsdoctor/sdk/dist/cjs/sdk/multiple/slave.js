"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var slave_exports = {};
__export(slave_exports, {
  RsdoctorSlaveSDK: () => RsdoctorSlaveSDK
});
module.exports = __toCommonJS(slave_exports);
var import_path = __toESM(require("path"));
var import_sdk = require("../sdk");
var import_server = require("./server");
let id = 1;
class RsdoctorSlaveSDK extends import_sdk.RsdoctorWebpackSDK {
  constructor({
    name,
    stage,
    controller,
    extraConfig
  }) {
    super({ name, root: controller.root });
    const lastSdk = controller.getLastSdk();
    const port = lastSdk ? lastSdk.server.port + 1 : this.server.port;
    this.id = id++;
    this.stage = typeof stage === "number" ? stage : 1;
    this.extraConfig = extraConfig;
    this.parent = controller;
    this.server = new import_server.RsdoctorSlaveServer(this, port);
    this.setName(name);
    this.clearSwitch();
  }
  clearSwitch() {
    this.uploadPieces = new Promise((resolve) => {
      this.finishUploadPieceSwitch = resolve;
    });
  }
  get isMaster() {
    return this.parent.master === this;
  }
  async writePieces() {
    const { name, parent, isMaster, outputDir, finishUploadPieceSwitch } = this;
    this.setOutputDir(
      isMaster ? outputDir : import_path.default.join(
        parent.master.outputDir,
        ".slaves",
        name.replace(/\s+/g, "-")
      )
    );
    await super.writePieces(this.getStoreData());
    finishUploadPieceSwitch?.();
  }
  async writeManifest() {
    const { parent, cloudData } = this;
    await Promise.all(this.parent.slaves.map((item) => item.uploadPieces));
    if (cloudData) {
      cloudData.name = this.name;
      cloudData.series = parent.getSeriesData();
    }
    const result = await super.writeManifest();
    this.clearSwitch();
    return result;
  }
  getSeriesData(serverUrl = false) {
    return this.parent.getSeriesData(serverUrl);
  }
  setName(name) {
    this._name = this.parent.hasName(name) ? `${name}-${id}` : name;
  }
  getManifestData() {
    const data = super.getManifestData();
    data.name = this.name;
    data.series = this.getSeriesData(true);
    return data;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  RsdoctorSlaveSDK
});
