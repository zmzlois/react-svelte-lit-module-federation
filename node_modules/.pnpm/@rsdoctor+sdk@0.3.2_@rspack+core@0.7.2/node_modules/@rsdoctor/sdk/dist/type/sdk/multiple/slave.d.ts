import { SDK } from '@rsdoctor/types';
import { RsdoctorWebpackSDK } from '../sdk';
import type { RsdoctorSDKController } from './controller';
interface RsdoctorSlaveSDKOptions {
    name: string;
    /**
     * use to sort for display in the client page.
     * the smaller the front.
     * @default 1
     */
    stage?: number;
    extraConfig?: SDK.SDKOptionsType;
    controller: RsdoctorSDKController;
}
export declare class RsdoctorSlaveSDK extends RsdoctorWebpackSDK {
    id: number;
    parent: RsdoctorSDKController;
    readonly stage: number;
    private uploadPieces;
    private finishUploadPieceSwitch;
    constructor({ name, stage, controller, extraConfig, }: RsdoctorSlaveSDKOptions);
    private clearSwitch;
    get isMaster(): boolean;
    protected writePieces(): Promise<void>;
    protected writeManifest(): Promise<string>;
    getSeriesData(serverUrl?: boolean): import("@rsdoctor/types/dist/manifest").RsdoctorManifestSeriesData[];
    setName(name: string): void;
    getManifestData(): import("@rsdoctor/types/dist/manifest").RsdoctorManifestWithShardingFiles;
}
export {};
//# sourceMappingURL=slave.d.ts.map