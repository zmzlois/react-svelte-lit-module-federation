import { SDK } from '@rsdoctor/types';
import type { Module } from './module';
import { Statement } from './statement';
export declare class Dependency implements SDK.DependencyInstance {
    static kind: typeof SDK.DependencyKind;
    static init(): void;
    readonly id: number;
    readonly request: string;
    readonly module: Module;
    readonly kind: SDK.DependencyKind;
    readonly statements: Statement[];
    private _originDependency;
    meta: SDK.DependencyBuildMeta;
    constructor(request: string, module: Module, dependency: Module, kind: SDK.DependencyKind, statements?: Statement[]);
    get resolvedRequest(): string;
    get dependency(): Module;
    get originDependency(): Module;
    get kindString(): "Unknown" | "ImportStatement" | "DynamicImport" | "RequireCall" | "AMDRequire";
    get resolveConcatenationModule(): boolean;
    isSameWithoutStatements(dep: Dependency): boolean;
    addStatement(statement: Statement): void;
    hasStatement(statement: Statement): boolean;
    setBuildMeta(data: SDK.DependencyBuildMeta): void;
    toData(): SDK.DependencyData;
}
//# sourceMappingURL=dependency.d.ts.map