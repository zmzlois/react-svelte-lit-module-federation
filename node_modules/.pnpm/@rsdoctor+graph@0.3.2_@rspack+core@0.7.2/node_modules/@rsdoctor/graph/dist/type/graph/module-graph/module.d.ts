import { SDK } from '@rsdoctor/types';
import type { SourceMapConsumer } from 'source-map';
import type { Program } from 'estree';
import { Dependency } from './dependency';
import { Statement } from './statement';
import { Chunk } from '../chunk-graph';
export declare class Module implements SDK.ModuleInstance {
    static kind: typeof SDK.ModuleKind;
    static init(): void;
    readonly id: number;
    readonly webpackId: string;
    readonly path: string;
    readonly isEntry: boolean;
    readonly kind: SDK.ModuleKind;
    private source;
    private size;
    private sourceMap;
    private program;
    private chunks;
    private dependencies;
    private imported;
    private modules;
    private concatenationModules;
    private _isPreferSource?;
    meta: SDK.ModuleBuildMeta;
    constructor(webpackId: string, path: string, isEntry?: boolean, kind?: SDK.ModuleKind);
    get rootModule(): Module | undefined;
    get isPreferSource(): boolean;
    getChunks(): Chunk[];
    addChunk(chunk: Chunk): void;
    removeChunk(chunk: Chunk): void;
    getDependencies(): Dependency[];
    getDependencyByRequest(request: string): Dependency | undefined;
    getDependencyByModule(module: Module): Dependency | undefined;
    addDependency(request: string, module: Module, kind: SDK.DependencyKind, statements?: Statement[]): Dependency | undefined;
    removeDependency(dep: Dependency): void;
    removeDependencyByModule(module: Module): void;
    getImported(): Module[];
    addImported(module: Module): void;
    removeImported(module: Module): void;
    setProgram(program: Program): void;
    getProgram(): Program | undefined;
    setSource(input: Partial<SDK.ModuleSource>): void;
    getSource(type?: SDK.ToDataType): {
        source: string;
        transformed: string;
        parsedSource: string;
    };
    setSourceMap(sourceMap: SourceMapConsumer): void;
    getSourceMap(): SourceMapConsumer | undefined;
    setSize(input: Partial<SDK.ModuleSize>): void;
    getSize(): {
        sourceSize: number;
        transformedSize: number;
        parsedSize: number;
    };
    getStatement(transformed: SDK.SourceRange): Statement;
    getSourceRange(transformed: SDK.SourceRange): SDK.SourceRange | undefined;
    addNormalModule(module: Module): void;
    getNormalModules(): Module[];
    addConcatenationModule(module: Module): void;
    getConcatenationModules(): Module[];
    toData(contextPath?: string): SDK.ModuleData;
}
//# sourceMappingURL=module.d.ts.map