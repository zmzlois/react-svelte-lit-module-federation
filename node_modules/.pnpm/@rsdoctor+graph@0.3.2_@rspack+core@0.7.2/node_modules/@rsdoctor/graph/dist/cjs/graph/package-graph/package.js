"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var package_exports = {};
__export(package_exports, {
  Package: () => Package
});
module.exports = __toCommonJS(package_exports);
var import_path = require("path");
var import_utils = require("./utils");
let id = 1;
class Package {
  constructor(name, root, version) {
    this.id = id++;
    this._modules = [];
    this._dependencies = [];
    this._imported = [];
    this.name = name;
    this.root = root;
    this.version = version;
  }
  getModules() {
    return this._modules.slice();
  }
  getDependencies() {
    return this._dependencies.slice();
  }
  getImported() {
    return this._imported.slice();
  }
  addModule(module2) {
    if (!this._modules.includes(module2)) {
      this._modules.push(module2);
    }
  }
  addDependency(dep) {
    if (this._dependencies.every((item) => !item.isSame(dep))) {
      this._dependencies.push(dep);
      dep.dependency.addImported(this);
    }
  }
  getDependenciesChain(graph) {
    function getImported(pkg, ans) {
      const dependencies = graph.getDependenciesFromPackage(pkg);
      for (const dep of dependencies) {
        if (!dep.refDependency) {
          continue;
        }
        if (ans.some((dep2) => dep2.dependency === pkg)) {
          continue;
        }
        if (!dep.package) {
          return ans.concat(dep);
        }
        return getImported(dep.package, ans.concat(dep));
      }
      return ans;
    }
    return getImported(this, []);
  }
  addImported(pkg) {
    if (!this._imported.includes(pkg)) {
      this._imported.push(pkg);
    }
  }
  contain(file) {
    const subPath = (0, import_path.relative)(this.root, file);
    if (subPath.startsWith("..")) {
      return false;
    }
    return !(0, import_utils.isPackagePath)(subPath);
  }
  isSame(pkg) {
    return this.root === pkg.root && this.version === pkg.version && this.name === pkg.name;
  }
  getSize() {
    return this._modules.reduce(
      (ans, item) => {
        const size = item.getSize();
        ans.sourceSize += size.sourceSize;
        ans.transformedSize += size.transformedSize;
        ans.parsedSize += size.parsedSize;
        return ans;
      },
      {
        sourceSize: 0,
        transformedSize: 0,
        parsedSize: 0
      }
    );
  }
  toData() {
    return {
      id: this.id,
      name: this.name,
      root: this.root,
      version: this.version,
      modules: this.getModules().map((e) => e.id),
      size: this.getSize()
    };
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Package
});
