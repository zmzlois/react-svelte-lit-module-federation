"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var statement_exports = {};
__export(statement_exports, {
  Statement: () => Statement
});
module.exports = __toCommonJS(statement_exports);
var import_utils = require("./utils");
class Statement {
  static getDefaultStatement(module2) {
    const defaultPosition = {
      line: 1,
      column: 0
    };
    const defaultRange = {
      start: { ...defaultPosition },
      end: { ...defaultPosition }
    };
    return new Statement(module2, {
      source: { ...defaultRange },
      transformed: { ...defaultRange }
    });
  }
  constructor(module2, position) {
    this.module = module2;
    this.position = position;
  }
  isSame(statement) {
    return this.module.id === statement.module.id && (0, import_utils.isSameRange)(this.position.transformed, statement.position.transformed);
  }
  getSourcePosition() {
    const { module: module2, position } = this;
    if (position.source) {
      return position.source;
    }
    if (module2.getSourceMap()) {
      position.source = module2.getSourceRange(position.transformed);
      return position.source;
    }
  }
  getLineCode() {
    const useSource = this.module.isPreferSource && this.position.source;
    const sourceCode = this.module.getSource();
    const source = useSource ? sourceCode.source : sourceCode.transformed;
    const line = useSource ? this.position.source.start.line : this.position.transformed.start.line;
    if (typeof line === "number") {
      return source.split("\n")[line - 1];
    }
  }
  toData() {
    const position = {
      transformed: this.position.transformed
    };
    if (this.position.source) {
      position.source = this.position.source;
    }
    return {
      position,
      module: this.module.id
    };
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Statement
});
