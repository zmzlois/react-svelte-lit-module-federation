"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var dependency_exports = {};
__export(dependency_exports, {
  Dependency: () => Dependency
});
module.exports = __toCommonJS(dependency_exports);
var import_types = require("@rsdoctor/types");
let id = 1;
class Dependency {
  constructor(request, module2, dependency, kind, statements) {
    this.statements = [];
    this.meta = {
      exportsType: "default-with-named"
    };
    this.id = id++;
    this.request = request;
    this.module = module2;
    this._originDependency = dependency;
    this.kind = kind;
    this.statements = statements ?? [];
  }
  static init() {
    id = 1;
  }
  get resolvedRequest() {
    return this.dependency.path;
  }
  get dependency() {
    return this.originDependency.rootModule ?? this.originDependency;
  }
  get originDependency() {
    return this._originDependency;
  }
  get kindString() {
    return import_types.SDK.DependencyKind[this.kind];
  }
  get resolveConcatenationModule() {
    return this.dependency.kind === import_types.SDK.ModuleKind.Concatenation;
  }
  isSameWithoutStatements(dep) {
    return this.request === dep.request && this.kind === dep.kind && this.module.id === dep.module.id && this.dependency.id === dep.dependency.id;
  }
  addStatement(statement) {
    if (!this.hasStatement(statement)) {
      this.statements.push(statement);
    }
  }
  hasStatement(statement) {
    return this.statements.some((item) => item.isSame(statement));
  }
  setBuildMeta(data) {
    this.meta = {
      ...this.meta,
      ...data
    };
  }
  toData() {
    return {
      id: this.id,
      request: this.request,
      resolvedRequest: this.resolvedRequest,
      kind: this.kind,
      module: this.module.id,
      dependency: this.dependency.id,
      originDependency: this.originDependency.id,
      statements: this.statements.map((item) => item.toData())
    };
  }
}
Dependency.kind = import_types.SDK.DependencyKind;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Dependency
});
