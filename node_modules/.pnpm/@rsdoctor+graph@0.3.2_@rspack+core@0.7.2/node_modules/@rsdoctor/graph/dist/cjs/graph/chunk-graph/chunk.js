"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var chunk_exports = {};
__export(chunk_exports, {
  Chunk: () => Chunk
});
module.exports = __toCommonJS(chunk_exports);
class Chunk {
  constructor(id, name, size, initial, entry) {
    this._assets = [];
    this._modules = [];
    this._dependencies = [];
    this._imported = [];
    this.id = id;
    this.name = name;
    this.size = size;
    this.initial = initial;
    this.entry = entry;
  }
  isEntry() {
    return this.entry;
  }
  isChunkEntryModule(module2) {
    return module2.isEntry || module2.getImported().every((item) => !this.hasModule(item));
  }
  hasModule(module2) {
    return this._modules.includes(module2);
  }
  addModule(module2) {
    if (!this.hasModule(module2)) {
      this._modules.push(module2);
      module2.addChunk(this);
    }
  }
  addAsset(asset) {
    this._assets.push(asset);
  }
  addModules(modules) {
    modules.forEach((module2) => {
      if (!this.hasModule(module2)) {
        this._modules.push(module2);
        module2.addChunk(this);
      }
    });
  }
  addDependency(dep) {
    if (!this._dependencies.includes(dep)) {
      this._dependencies.push(dep);
    }
  }
  addImported(imported) {
    if (!this._imported.includes(imported)) {
      this._imported.push(imported);
    }
  }
  getAssets() {
    return this._assets.slice();
  }
  getModules() {
    return this._modules.slice();
  }
  getDependencies() {
    return this._dependencies.slice();
  }
  getImported() {
    return this._imported.slice();
  }
  setParsedSize(parsedSize) {
    this._parsedSize = parsedSize;
  }
  toData() {
    return {
      id: this.id,
      name: this.name,
      initial: this.initial,
      size: this.size,
      parsedSize: this._parsedSize || 0,
      entry: this.isEntry(),
      assets: this._assets.map(({ path }) => path),
      modules: this._modules.map(({ id }) => id),
      dependencies: this._dependencies.map(({ id }) => id),
      imported: this._imported.map(({ id }) => id)
    };
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Chunk
});
