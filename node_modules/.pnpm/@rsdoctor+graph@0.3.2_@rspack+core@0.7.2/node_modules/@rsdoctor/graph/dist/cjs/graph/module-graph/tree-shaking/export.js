"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var export_exports = {};
__export(export_exports, {
  ExportInfo: () => ExportInfo
});
module.exports = __toCommonJS(export_exports);
let id = 1;
class ExportInfo {
  constructor(name, identifier, variable) {
    this.id = id++;
    this._sideEffects = [];
    this.name = name;
    this.identifier = identifier;
    this._variable = variable;
  }
  static init() {
    id = 1;
  }
  get isReExport() {
    return Boolean(this.from);
  }
  set variable(data) {
    this._variable = data;
  }
  get variable() {
    if (this._variable) {
      return this._variable;
    }
    if (!this.from || this._variable === false) {
      this._variable = false;
      return;
    }
    const result = this.getRecursiveExport()?.variable;
    if (!result) {
      this._variable = false;
    }
    return result;
  }
  addSideEffect(info) {
    if (this._sideEffects.every((item) => item.id !== info.id)) {
      this._sideEffects.push(info);
      if (this.from) {
        this.from.addSideEffect(info);
      }
    }
  }
  getSideEffects() {
    return this._sideEffects.slice();
  }
  setFromExport(from) {
    this.from = from;
  }
  getRecursiveExport(depth = Infinity) {
    if (depth === 0) {
      throw new Error(
        "`getRecursiveExport` method parameter depth must be greater than 1."
      );
    }
    if (!this.from) {
      return this;
    }
    let currentDepth = 0;
    let current = this;
    while (current.from && currentDepth < depth) {
      currentDepth++;
      current = current.from;
    }
    return current;
  }
  toData() {
    const data = {
      id: this.id,
      name: this.name,
      isReExport: this.isReExport,
      used: this._sideEffects.map((item) => item.id)
    };
    if (this.from) {
      data.from = this.from.id;
      data.root = this.getRecursiveExport().id;
    }
    if (this.variable) {
      data.variable = this.variable.id;
    }
    return data;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ExportInfo
});
