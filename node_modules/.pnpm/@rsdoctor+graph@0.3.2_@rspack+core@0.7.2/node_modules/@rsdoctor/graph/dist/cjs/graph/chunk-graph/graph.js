"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var graph_exports = {};
__export(graph_exports, {
  ChunkGraph: () => ChunkGraph
});
module.exports = __toCommonJS(graph_exports);
class ChunkGraph {
  constructor() {
    this._assets = [];
    this._chunks = [];
    this._entrypoints = [];
  }
  getAssets() {
    return this._assets.slice();
  }
  getChunks() {
    return this._chunks.slice();
  }
  addAsset(...assets) {
    assets.forEach((asset) => {
      if (!this._assets.includes(asset)) {
        this._assets.push(asset);
      }
    });
  }
  addChunk(...chunks) {
    chunks.forEach((chunk) => {
      if (!this._chunks.includes(chunk)) {
        this._chunks.push(chunk);
      }
    });
  }
  getChunkById(id) {
    return this._chunks.find((item) => item.id === id);
  }
  getChunkByModule(module2) {
    return this._chunks.find((item) => item.hasModule(module2));
  }
  getAssetByPath(path) {
    return this._assets.find((item) => item.path === path);
  }
  getAssetsByChunk(chunk) {
    return this._assets.filter((item) => {
      const _chunk = item.chunks.find((ck) => ck.id === chunk.id);
      if (_chunk)
        return true;
    });
  }
  getEntryPoints() {
    return this._entrypoints.slice();
  }
  addEntryPoint(...entrypoints) {
    entrypoints.forEach((entrypoint) => {
      if (!this._entrypoints.includes(entrypoint)) {
        this._entrypoints.push(entrypoint);
      }
    });
  }
  /** output the chunk graph data */
  toData(type) {
    return {
      assets: this._assets.map((item) => item.toData(type)),
      chunks: this._chunks.map((item) => item.toData()),
      entrypoints: this._entrypoints.map((item) => item.toData())
    };
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ChunkGraph
});
