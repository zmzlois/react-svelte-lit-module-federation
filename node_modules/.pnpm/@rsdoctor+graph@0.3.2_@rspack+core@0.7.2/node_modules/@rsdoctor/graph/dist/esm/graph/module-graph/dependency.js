import { SDK } from "@rsdoctor/types";
let id = 1;
class Dependency {
  constructor(request, module, dependency, kind, statements) {
    this.statements = [];
    this.meta = {
      exportsType: "default-with-named"
    };
    this.id = id++;
    this.request = request;
    this.module = module;
    this._originDependency = dependency;
    this.kind = kind;
    this.statements = statements ?? [];
  }
  static init() {
    id = 1;
  }
  get resolvedRequest() {
    return this.dependency.path;
  }
  get dependency() {
    return this.originDependency.rootModule ?? this.originDependency;
  }
  get originDependency() {
    return this._originDependency;
  }
  get kindString() {
    return SDK.DependencyKind[this.kind];
  }
  get resolveConcatenationModule() {
    return this.dependency.kind === SDK.ModuleKind.Concatenation;
  }
  isSameWithoutStatements(dep) {
    return this.request === dep.request && this.kind === dep.kind && this.module.id === dep.module.id && this.dependency.id === dep.dependency.id;
  }
  addStatement(statement) {
    if (!this.hasStatement(statement)) {
      this.statements.push(statement);
    }
  }
  hasStatement(statement) {
    return this.statements.some((item) => item.isSame(statement));
  }
  setBuildMeta(data) {
    this.meta = {
      ...this.meta,
      ...data
    };
  }
  toData() {
    return {
      id: this.id,
      request: this.request,
      resolvedRequest: this.resolvedRequest,
      kind: this.kind,
      module: this.module.id,
      dependency: this.dependency.id,
      originDependency: this.originDependency.id,
      statements: this.statements.map((item) => item.toData())
    };
  }
}
Dependency.kind = SDK.DependencyKind;
export {
  Dependency
};
