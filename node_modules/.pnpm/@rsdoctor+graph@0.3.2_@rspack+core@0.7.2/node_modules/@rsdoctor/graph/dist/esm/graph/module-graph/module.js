import { SDK } from "@rsdoctor/types";
import path from "path";
import { isNumber } from "lodash";
import { Dependency } from "./dependency";
import { Statement } from "./statement";
import { getModuleName } from "./utils";
let id = 1;
class Module {
  constructor(webpackId, path2, isEntry = false, kind = SDK.ModuleKind.Normal) {
    this.source = {
      source: "",
      transformed: "",
      parsedSource: ""
    };
    this.size = {
      sourceSize: 0,
      transformedSize: 0,
      parsedSize: 0
    };
    this.chunks = [];
    this.dependencies = [];
    this.imported = [];
    this.modules = [];
    this.concatenationModules = [];
    this.meta = {
      hasSetEsModuleStatement: false,
      strictHarmonyModule: false
    };
    this.id = id++;
    this.webpackId = webpackId;
    this.path = path2;
    this.isEntry = isEntry;
    this.kind = kind;
  }
  static init() {
    id = 1;
  }
  get rootModule() {
    return this.modules.find((item) => item.path === this.path);
  }
  get isPreferSource() {
    if (typeof this._isPreferSource === "boolean") {
      return this._isPreferSource;
    }
    const result = this.source.source.length > 0 && this.source.source !== "test code" && Boolean(this.sourceMap);
    this._isPreferSource = result;
    return result;
  }
  getChunks() {
    return this.chunks.slice();
  }
  addChunk(chunk) {
    if (!this.chunks.includes(chunk)) {
      this.chunks.push(chunk);
      chunk.addModule(this);
    }
  }
  removeChunk(chunk) {
    this.chunks = this.chunks.filter((item) => item !== chunk);
  }
  getDependencies() {
    return this.dependencies.slice();
  }
  getDependencyByRequest(request) {
    return this.dependencies.find((item) => item.request === request);
  }
  getDependencyByModule(module) {
    return this.dependencies.find(
      (item) => item.originDependency === module || item.dependency === module
    );
  }
  addDependency(request, module, kind, statements) {
    const dep = new Dependency(request, this, module, kind, statements);
    if (this.dependencies.every((item) => !item.isSameWithoutStatements(dep))) {
      this.dependencies.push(dep);
      module.addImported(this);
      if (module.rootModule) {
        module.rootModule.addImported(this);
      }
      return dep;
    }
  }
  removeDependency(dep) {
    this.dependencies = this.dependencies.filter((item) => item === dep);
  }
  removeDependencyByModule(module) {
    const dep = this.getDependencyByModule(module);
    if (dep) {
      this.removeDependency(dep);
    }
  }
  getImported() {
    return this.imported.slice();
  }
  addImported(module) {
    if (!this.imported.includes(module)) {
      this.imported.push(module);
    }
  }
  removeImported(module) {
    this.imported = this.imported.filter((item) => item === module);
  }
  setProgram(program) {
    this.program = program;
  }
  getProgram() {
    return this.program;
  }
  setSource(input) {
    const { source } = this;
    source.source = input.source ?? source.source;
    source.transformed = input.transformed ?? source.transformed;
    source.parsedSource = input.parsedSource ?? source.parsedSource;
  }
  getSource(type = SDK.ToDataType.Normal) {
    if (type === SDK.ToDataType.Lite || type === SDK.ToDataType.LiteAndNoAsset) {
      return {
        source: "",
        transformed: "",
        parsedSource: this.isPreferSource ? "" : this.source.parsedSource
      };
    }
    if (type === SDK.ToDataType.All) {
      return {
        source: this.source.source,
        transformed: this.source.transformed,
        parsedSource: this.isPreferSource ? "" : this.source.parsedSource
      };
    }
    return {
      source: this.source.source,
      transformed: "",
      parsedSource: this.isPreferSource ? "" : this.source.parsedSource
    };
  }
  setSourceMap(sourceMap) {
    this.sourceMap = sourceMap;
  }
  getSourceMap() {
    return this.sourceMap;
  }
  setSize(input) {
    const { size } = this;
    size.sourceSize = input.sourceSize ?? size.sourceSize;
    size.transformedSize = input.transformedSize ?? size.transformedSize;
    size.parsedSize = input.parsedSize ?? size.parsedSize;
  }
  getSize() {
    return { ...this.size };
  }
  getStatement(transformed) {
    return new Statement(this, {
      source: this.getSourceRange(transformed),
      transformed: {
        start: { ...transformed.start },
        end: transformed.end ? { ...transformed.end } : void 0
      }
    });
  }
  getSourceRange(transformed) {
    const { sourceMap } = this;
    if (!sourceMap) {
      return;
    }
    const source = {
      start: {}
    };
    const startInSource = sourceMap.originalPositionFor({
      line: transformed.start.line ?? 0,
      column: transformed.start.column ?? 0,
      // The largest lower bound.
      bias: 1
    });
    if (isNumber(startInSource.line)) {
      source.start = {
        line: startInSource.line,
        column: startInSource.column ?? void 0
      };
    }
    if (transformed.end) {
      const endInSource = sourceMap.originalPositionFor({
        line: transformed.end.line ?? 0,
        column: transformed.end.column ?? 0
        // The smallest lower bound
        // bias: 2,
      });
      if (isNumber(endInSource.line)) {
        source.end = {
          line: endInSource.line,
          column: endInSource.column ?? void 0
        };
      }
    }
    return source;
  }
  addNormalModule(module) {
    if (!this.modules.includes(module)) {
      this.modules.push(module);
      module.addConcatenationModule(this);
    }
  }
  getNormalModules() {
    return this.modules.slice();
  }
  addConcatenationModule(module) {
    if (!this.concatenationModules.includes(module)) {
      this.concatenationModules.push(module);
    }
  }
  getConcatenationModules() {
    return this.concatenationModules.slice();
  }
  toData(contextPath) {
    const { isPreferSource } = this;
    const moduleName = getModuleName(this.webpackId);
    const data = {
      id: this.id,
      webpackId: contextPath && moduleName.indexOf(".") > 0 ? path.relative(contextPath, moduleName) : this.webpackId,
      path: this.path,
      isPreferSource,
      dependencies: this.dependencies.map((item) => item.id),
      imported: this.imported.map((item) => item.id),
      chunks: this.chunks.map((item) => item.id),
      size: this.getSize(),
      kind: this.kind
    };
    if (this.meta.hasSetEsModuleStatement || this.meta.strictHarmonyModule) {
      data.meta = {};
      if (this.meta.hasSetEsModuleStatement) {
        data.meta.hasSetEsModuleStatement = true;
      }
      if (this.meta.strictHarmonyModule) {
        data.meta.strictHarmonyModule = true;
      }
    }
    if (this.isEntry) {
      data.isEntry = this.isEntry;
    }
    if (this.modules.length > 0) {
      data.modules = this.modules.map((item) => item.id);
    }
    if (this.rootModule) {
      data.rootModule = this.rootModule.id;
    }
    if (this.concatenationModules.length > 0) {
      data.concatenationModules = this.concatenationModules.map(
        (data2) => data2.id
      );
    }
    return data;
  }
}
Module.kind = SDK.ModuleKind;
export {
  Module
};
