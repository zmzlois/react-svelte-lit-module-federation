let id = 1;
const _SideEffect = class _SideEffect {
  constructor(name, module, identifier, fromRequest, originName) {
    this.id = id++;
    this._exports = [];
    this.name = name;
    this.module = module;
    this.identifier = identifier;
    if (fromRequest) {
      this.fromDependency = this.module.getDependencyByRequest(fromRequest);
    }
    if (originName === _SideEffect.NamespaceSymbol) {
      this.isNameSpace = true;
    } else {
      this.isNameSpace = false;
      this.originName = originName;
    }
  }
  static init() {
    id = 1;
  }
  get variable() {
    if (typeof this._variable !== "undefined") {
      if (this._variable) {
        return this._variable;
      }
      return;
    }
    const result = this.exports[0]?.getRecursiveExport()?.variable;
    this._variable = result ?? false;
    return result;
  }
  get exports() {
    return this._exports?.slice() ?? [];
  }
  setModuleExport(mgm) {
    mgm.getExports().forEach((info) => this.setExportInfo(info));
  }
  setExportInfo(info) {
    this._exports.push(info);
    info.addSideEffect(this);
  }
  toData() {
    const data = {
      id: this.id,
      name: this.name,
      identifier: this.identifier.toData(),
      module: this.module.id
    };
    if (this.fromDependency) {
      data.fromDependency = this.fromDependency.id;
    }
    if (this.isNameSpace) {
      data.isNameSpace = this.isNameSpace;
    }
    if (this.exports.length > 0) {
      data.exports = this.exports.map((item) => item.id);
    }
    if (this.variable) {
      data.variable = this.variable.id;
    }
    return data;
  }
};
/** Name import tags */
_SideEffect.NamespaceSymbol = Symbol("namespace");
let SideEffect = _SideEffect;
export {
  SideEffect
};
