class ChunkGraph {
  constructor() {
    this._assets = [];
    this._chunks = [];
    this._entrypoints = [];
  }
  getAssets() {
    return this._assets.slice();
  }
  getChunks() {
    return this._chunks.slice();
  }
  addAsset(...assets) {
    assets.forEach((asset) => {
      if (!this._assets.includes(asset)) {
        this._assets.push(asset);
      }
    });
  }
  addChunk(...chunks) {
    chunks.forEach((chunk) => {
      if (!this._chunks.includes(chunk)) {
        this._chunks.push(chunk);
      }
    });
  }
  getChunkById(id) {
    return this._chunks.find((item) => item.id === id);
  }
  getChunkByModule(module) {
    return this._chunks.find((item) => item.hasModule(module));
  }
  getAssetByPath(path) {
    return this._assets.find((item) => item.path === path);
  }
  getAssetsByChunk(chunk) {
    return this._assets.filter((item) => {
      const _chunk = item.chunks.find((ck) => ck.id === chunk.id);
      if (_chunk)
        return true;
    });
  }
  getEntryPoints() {
    return this._entrypoints.slice();
  }
  addEntryPoint(...entrypoints) {
    entrypoints.forEach((entrypoint) => {
      if (!this._entrypoints.includes(entrypoint)) {
        this._entrypoints.push(entrypoint);
      }
    });
  }
  /** output the chunk graph data */
  toData(type) {
    return {
      assets: this._assets.map((item) => item.toData(type)),
      chunks: this._chunks.map((item) => item.toData()),
      entrypoints: this._entrypoints.map((item) => item.toData())
    };
  }
}
export {
  ChunkGraph
};
