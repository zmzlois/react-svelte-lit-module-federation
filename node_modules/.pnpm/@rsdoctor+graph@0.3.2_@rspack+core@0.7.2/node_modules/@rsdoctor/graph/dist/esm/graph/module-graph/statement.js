import { isSameRange } from "./utils";
class Statement {
  static getDefaultStatement(module) {
    const defaultPosition = {
      line: 1,
      column: 0
    };
    const defaultRange = {
      start: { ...defaultPosition },
      end: { ...defaultPosition }
    };
    return new Statement(module, {
      source: { ...defaultRange },
      transformed: { ...defaultRange }
    });
  }
  constructor(module, position) {
    this.module = module;
    this.position = position;
  }
  isSame(statement) {
    return this.module.id === statement.module.id && isSameRange(this.position.transformed, statement.position.transformed);
  }
  getSourcePosition() {
    const { module, position } = this;
    if (position.source) {
      return position.source;
    }
    if (module.getSourceMap()) {
      position.source = module.getSourceRange(position.transformed);
      return position.source;
    }
  }
  getLineCode() {
    const useSource = this.module.isPreferSource && this.position.source;
    const sourceCode = this.module.getSource();
    const source = useSource ? sourceCode.source : sourceCode.transformed;
    const line = useSource ? this.position.source.start.line : this.position.transformed.start.line;
    if (typeof line === "number") {
      return source.split("\n")[line - 1];
    }
  }
  toData() {
    const position = {
      transformed: this.position.transformed
    };
    if (this.position.source) {
      position.source = this.position.source;
    }
    return {
      position,
      module: this.module.id
    };
  }
}
export {
  Statement
};
