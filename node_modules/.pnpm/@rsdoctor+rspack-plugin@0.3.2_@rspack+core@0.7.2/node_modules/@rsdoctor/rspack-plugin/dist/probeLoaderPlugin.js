"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var probeLoaderPlugin_exports = {};
__export(probeLoaderPlugin_exports, {
  ProbeLoaderPlugin: () => ProbeLoaderPlugin
});
module.exports = __toCommonJS(probeLoaderPlugin_exports);
var import_build_utils = require("@rsdoctor/core/build-utils");
var import_path = __toESM(require("path"));
const BuiltinLoaderName = "builtin:swc-loader";
const ESMLoaderFile = ".mjs";
class ProbeLoaderPlugin {
  apply(compiler) {
    compiler.hooks.beforeRun.tap(
      {
        name: "ProbeLoaderPlugin"
      },
      () => {
        this.addProbeLoader(compiler);
      }
    );
    compiler.hooks.watchRun.tap(
      {
        name: "ProbeLoaderPlugin"
      },
      () => {
        this.addProbeLoader(compiler);
      }
    );
  }
  addProbeLoader(compiler) {
    const rules = compiler.options.module.rules;
    const appendRule = (rule, index) => {
      if ("use" in rule && Array.isArray(rule.use)) {
        const _builtinRule = rule.use[index];
        const _options = typeof _builtinRule.options === "string" ? {} : { ..._builtinRule };
        rule.use.splice(index, 0, {
          loader: import_path.default.join(__dirname, "./probeLoader.js"),
          options: {
            ..._options,
            type: "end",
            builderName: compiler.options.name
          }
        });
        rule.use.splice(index + 2, 0, {
          loader: import_path.default.join(__dirname, "./probeLoader.js"),
          options: {
            ..._options,
            type: "start",
            builderName: compiler.options.name
          }
        });
      }
      return rule;
    };
    compiler.options.module.rules = import_build_utils.Utils.addProbeLoader2Rules(
      rules,
      BuiltinLoaderName,
      appendRule
    );
    compiler.options.module.rules = import_build_utils.Utils.addProbeLoader2Rules(
      rules,
      ESMLoaderFile,
      appendRule,
      false
    );
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ProbeLoaderPlugin
});
