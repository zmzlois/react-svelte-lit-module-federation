"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var probeLoader_exports = {};
__export(probeLoader_exports, {
  default: () => probeLoader_default
});
module.exports = __toCommonJS(probeLoader_exports);
var import_plugins = require("@rsdoctor/core/plugins");
var import_loader_utils = require("loader-utils");
var import_lodash = require("lodash");
var import_path = __toESM(require("path"));
const loaderModule = function(...args) {
  const time = Date.now();
  const code = args[0];
  const _options = this.getOptions();
  const sdk = (0, import_plugins.getSDK)(_options.builderName);
  const loaderData = {
    resource: {
      path: this.resourcePath,
      query: (0, import_loader_utils.parseQuery)(this.resourceQuery || "?"),
      queryRaw: this.resourceQuery,
      ext: import_path.default.extname(this.resourcePath).slice(1)
    },
    loaders: [
      {
        loader: _options.loader,
        loaderIndex: this.loaderIndex,
        path: _options.loader,
        input: _options.type === "start" ? code : null,
        result: _options.type === "end" ? code : null,
        startAt: _options.type === "start" ? time : 0,
        endAt: _options.type === "end" ? time : 0,
        options: (0, import_lodash.omit)(_options.options, "type"),
        isPitch: false,
        sync: false,
        errors: [],
        pid: process.pid,
        ppid: process.ppid
      }
    ]
  };
  sdk.reportLoaderStartOrEnd(loaderData);
  this.callback(null, ...args);
};
var probeLoader_default = loaderModule;
